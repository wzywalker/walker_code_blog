<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Maverick</title><link>/</link><description>This is Maverick, Theme Galileo.</description><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://cdn.jsdelivr.net/gh/wzywalker/wzywalker.github.io@main/android-chrome-512x512.png</url><title>Maverick</title><link>/</link></image><language>english</language><lastBuildDate>Fri, 14 Jan 2022 16:18:39 +0806</lastBuildDate><pubDate>Fri, 14 Jan 2022 16:18:39 +0806</pubDate><item><title>数据结构篇六：Fenwick-Tree-(Binary-Indexed-Tree)</title><link>/archives/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87%E5%85%AD%EF%BC%9AFenwick-Tree-%28Binary-Indexed-Tree%29/</link><description>&lt;p&gt;这是一位 google 工程师分享的8小时的&lt;a href="https://www.youtube.com/watch?v=RBSGKlAvoiM"&gt;数据结构&lt;/a&gt;的视频,我的笔记&lt;/p&gt;&lt;hr /&gt;
&lt;h1&gt;Fenwick Tree (Binary Indexed Tree)&lt;/h1&gt;
&lt;p&gt;树状数组&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Motivation&lt;/strong&gt;&lt;/p&gt;&lt;figure style="flex: 118.0952380952381" &gt;&lt;img loading="lazy" width="1240" height="525" src="https://cdn.jsdelivr.net/gh/wzywalker/wzywalker.github.io@main/archives/assets/2591209692305dbd9d640a53765581e1.png" /&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;计算数组里任意连续片段的和，最直观的方案当然是累加：线性时间O(n)&lt;/li&gt;
&lt;li&gt;但是如果你有一个记录了每个节点到当前位置时的累加和的数组（&lt;code&gt;prefix sum&lt;/code&gt;），立刻变成了常量时间&lt;/li&gt;
&lt;li&gt;问题是更新数据变成了线性时间（后续所有的求和都要改一遍）&lt;ul&gt;
&lt;li&gt;great for &lt;code&gt;static arrays&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以引入了:
&lt;code&gt;Fenwick Tree&lt;/code&gt; is an efficient data structure for performing range/point queries/updates.(即在上面的动机上，还考虑了update的效率)&lt;/p&gt;&lt;p&gt;前面的例子在update时效率不高，所以Fenwick Tree用了一种聪明的方式，不是累加所有的值，而是分段累加，具体实现看下图：
&lt;figure style="flex: 67.24511930585683" &gt;&lt;img loading="lazy" width="1240" height="922" src="https://cdn.jsdelivr.net/gh/wzywalker/wzywalker.github.io@main/archives/assets/eb45cb86abbe7a62cd8cc8d3fc2a8f06.png" /&gt;&lt;/figure&gt;&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;把索引值用二进制表示&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LSB&lt;/code&gt;的解释看图，实际应用上，就是看从低位到高位第一个1的右边有几个0，假设为&lt;code&gt;n&lt;/code&gt;个&lt;/li&gt;
&lt;li&gt;那么该cell上存的值就是前$2^n$个cell的值的和&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;图中例子是索引10，不直观，我们换成12， 二进制是1100， 最右边有2个零，那么它保存它$2^2=4$个位置的和。
也就是说，如果你要求和，如果用了cell 12位置的值的话，至少可以省掉3次累加。&lt;/p&gt;&lt;p&gt;当然，它还有更牛逼的特性，结合range query一起来看吧：
&lt;figure style="flex: 67.3913043478261" &gt;&lt;img loading="lazy" width="1240" height="920" src="https://cdn.jsdelivr.net/gh/wzywalker/wzywalker.github.io@main/archives/assets/0a9944a0140262760c9fb4a45cb3d75e.png" /&gt;&lt;/figure&gt;&lt;/p&gt;&lt;p&gt;蓝线表示的是当然位置上累加了前几个位置的值，已经很有规律了&lt;/p&gt;&lt;p&gt;假如计算前11个值的和，过程是：&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;11的索引是1011，右边没有0，所以当前的和为A[11]&lt;/li&gt;
&lt;li&gt;根据$2^0$来移位，来到10。&lt;ul&gt;
&lt;li&gt;右边一个0，所以它管$2^1$个presum，目前A[11] + A[10]&lt;/li&gt;
&lt;li&gt;下一个索引自然要减2了，来到8&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;8是1000，3个零，所以它存了$2^3=8$个值的和，那就是全部了&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以：sum = A[11] + A[10] + A[8]&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;心算sum(0,7)巩固一下&lt;/li&gt;
&lt;li&gt;用sum(11,15)演示子区间，其实就是多减1次，至于是减到10还是减到11，看描述，比如这里11是要参与计算的，那就是把前10个减掉就行了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面演示的都是&lt;code&gt;worst&lt;/code&gt;的情况，即首位为1，除了这种情况，别的位都至少存了前$2^n$个元素的值（比如16，直接得到16个元素的和）&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;这里都没讲你是怎么做这个tree的，而是怎么使用它。先弄清楚使用场景再谈构建。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2&gt;Point Update&lt;/h2&gt;
&lt;p&gt;复习一下&lt;code&gt;LSB&lt;/code&gt;，虽然可以直接数最右边的零的个数，但数学其实是：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;13 = 1101 ($2^3 + 2^2 + 2^0 \Rightarrow 10^3 + 10^2 + 10^0 $)&lt;/li&gt;
&lt;li&gt;减去最右边的1和0 =&amp;gt; 1100 （$2^3+2^2=12$) 所以下一个数是12&lt;/li&gt;
&lt;li&gt;减去最右边的1和0 =&amp;gt; 1000 就是8了&lt;/li&gt;
&lt;li&gt;再减就是0了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而按$2^n$来计算个数的话就是这样的：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;13 = 1101, 没有0，就是移1位，变成12&lt;/li&gt;
&lt;li&gt;12 = 1100， 2个0， 就是移4位，变成8&lt;/li&gt;
&lt;li&gt;8 = 1000， 3个0， 移8位，变成0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在来讲update，前面知道，update会级联影响到所以把该cell考虑进去的节点，因此，它需要反着往上找（极端情况当然是找到最后一个元素，通常这个元素就是整个数组的值，所以任何元素的更改，肯定都会影响到它）&lt;/p&gt;&lt;p&gt;前面找下一个节点用的是减法，现在就要用加法了，比如我更新了cell 9, 用以上两种任意一种方法来计算：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;$9 = 2^3 + 1 \Rightarrow 10^3 + 1 = 1001, +1 = 1010 = 10$&lt;/li&gt;
&lt;li&gt;1010 + 10 = 1100 = 12&lt;/li&gt;
&lt;li&gt;1100 + 100 = 10000 = 16 到顶了，&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以需要把9, 10, 12, 16分别应用这个point的更新，也就是说只有这几个cell把9计算进去了。&lt;/p&gt;&lt;figure style="flex: 66.59505907626209" &gt;&lt;img loading="lazy" width="1240" height="931" src="https://cdn.jsdelivr.net/gh/wzywalker/wzywalker.github.io@main/archives/assets/57cf2e654121e8c54e9f6cd1eeb60d9b.png" /&gt;&lt;/figure&gt;&lt;p&gt;当然，可以看一下左边的示意图，更直观&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; 
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;LSB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代码非常简单，就是不断通过LSB找下一个位置去更新就行了。&lt;/p&gt;&lt;h2&gt;Construction&lt;/h2&gt;
&lt;p&gt;现在来讲构建&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Clone the values array since we’re # doing in place operations&lt;/span&gt;
    &lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deepCopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;LSB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;几乎就一句话，就是把元素按原数据摆好（即不加别的节点）后，每次找到当前元素影响的上一级（不再向上冒泡）&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;比如1，把1算进去的有2，虽然上面还有4， 8， 16，但只把1更新到2&lt;/li&gt;
&lt;li&gt;到2的上一级是4 (2 + lsb(2) = 4), 把节点2的现值（已经加了节点1）加到4去&lt;/li&gt;
&lt;li&gt;所以核心算法始终只有两个变量，i，j代表最近的包含关系&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;一些算法换成位运算&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;lsb(i): &lt;code&gt;i &amp;amp; -i&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;i -= lsb(i) =&amp;gt; &lt;code&gt;i &amp;amp;= ~lsb(i)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description><author>hi@imalan.cn (walker)</author><guid isPermaLink="true">/archives/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87%E5%85%AD%EF%BC%9AFenwick-Tree-%28Binary-Indexed-Tree%29/</guid><pubDate>Fri, 12 Nov 2021 05:00:00 +0806</pubDate></item><item><title>数据结构篇七：Suffix-Array,-Longest-Common-Prefix-(LCP)-array</title><link>/archives/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87%E4%B8%83%EF%BC%9ASuffix-Array%2C-Longest-Common-Prefix-%28LCP%29-array/</link><description>&lt;p&gt;这是一位 google 工程师分享的8小时的&lt;a href="https://www.youtube.com/watch?v=RBSGKlAvoiM"&gt;数据结构&lt;/a&gt;的视频,我的笔记&lt;/p&gt;&lt;hr /&gt;
&lt;h1&gt;Suffix Array&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;字符串的所有子字符串后缀组成数组&lt;/li&gt;
&lt;li&gt;对子串根据首字母进行排序&lt;/li&gt;
&lt;li&gt;排序后原有的index就被打乱了&lt;/li&gt;
&lt;li&gt;这个乱序的indices就是&lt;code&gt;Suffix Array&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;做尾缀子串的时候通常是从单个字母开始越找越多，这就有了一个原生顺序，然后用首字母排序后，这个顺序就被打乱了&lt;/p&gt;&lt;p&gt;提供了一种&lt;code&gt;compressd representation&lt;/code&gt; of sorted suffixes而无需真的把这些子串存起来。&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;A space efficient alternative to a &lt;code&gt;suffix tree&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;a compressd version of a &lt;code&gt;trie&lt;/code&gt;?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;能做所有&lt;code&gt;suffix tree&lt;/code&gt;能做的事，并加添加了&lt;code&gt;Longest Common Prefix&lt;/code&gt;(LCP) array&lt;/p&gt;&lt;h1&gt;Longest Common Prefix (LCP) array&lt;/h1&gt;
&lt;p&gt;继续上面的Suffix Array，字母排序后，我们一个个地用每一个元素同上一个元素比，标记相同前缀的字母个数，这个数字序列就是&lt;code&gt;LCP&lt;/code&gt;&lt;/p&gt;&lt;p&gt;比如adc, adfgadc, 前缀&lt;code&gt;ab&lt;/code&gt;是相同的，那就是2。&lt;/p&gt;&lt;p&gt;第一个元素没有“上一个”去比，所以LCP数组第1位永远是0？（是的，其实是undefined，但一般设0）&lt;/p&gt;&lt;p&gt;衡量的是相邻的suffix array元素的前缀间有多少个字母相同。&lt;/p&gt;&lt;p&gt;当前也可以和下一个元素比（这样最后一个元素的LCP肯定是0了，原理同上）&lt;/p&gt;&lt;h2&gt;Find unique substrings&lt;/h2&gt;
&lt;p&gt;找到（或计数）一个数组的所有（不重复的）子元素。可以逐个substring遍历，$O(n^2)$，下面看看更快也更省空间的LCP方案。&lt;/p&gt;&lt;p&gt;找“AZAZA”的不重复子串:
A,AZ,AZA,AZAZ,AZAZA,Z,ZA,ZAZ,ZAZA,&lt;code&gt;A,AZ,AZA,Z,AZ,A&lt;/code&gt;，把重复的标注了出来。
LCP是这样的：
LCP|Sorted Suffixes|
-|-
0|A
1|AZA
3|AZAZA
0|ZA
2|ZAZA&lt;/p&gt;&lt;p&gt;我们知道第一列指的是“重复个数”，也就是说，如果按我们手写的那样去遍历，至少有这么多重复的子串，重复的既是“个数”，也是“组合方式”。&lt;/p&gt;&lt;p&gt;所以如果我们只需要计数的话，把右边的数出来就知道有会有多少个重复的了，此例为6.&lt;/p&gt;&lt;p&gt;$$\tt unique\ count = \underbrace{\frac{n(n+1)}{2}}_{substr\ count} - \underbrace{\sum_{i=1}^n LCP[i]}_{duplicates}$$&lt;/p&gt;
&lt;p&gt;这是LCP的应用之一，利用了LCP本身就是在数重复次数的特征。&lt;/p&gt;&lt;h2&gt;K common substring problem&lt;/h2&gt;
&lt;p&gt;n个字符串，找出一个子串，它至少是k个字符串的子串，求最大子串。$2\leq k \leq n$&lt;/p&gt;&lt;p&gt;即如果有k=2，那么这个子串只需要是其中两个的子串就行了，如果k=n，那么就需要是每一个字符串的子串。&lt;/p&gt;&lt;p&gt;直接上图
&lt;figure style="flex: 50.4885993485342" &gt;&lt;img loading="lazy" width="1240" height="1228" src="https://cdn.jsdelivr.net/gh/wzywalker/wzywalker.github.io@main/archives/assets/b7cb01449aa00a46b95ca35f28751a33.png" /&gt;&lt;/figure&gt;&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;图1演示k=3时，找到了&lt;code&gt;ca&lt;/code&gt;，即3个串里都有的是&lt;code&gt;ca&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;图2演示k=2时，找到了&lt;code&gt;bca&lt;/code&gt;，即&lt;code&gt;bca&lt;/code&gt;存在2个串里&lt;/li&gt;
&lt;li&gt;图3演示的是用了size=4的滑窗才包含了3个字符串，以及最大匹配是&lt;code&gt;AG&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;步骤：&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;首先，用几个分隔符把字符串拼接起来&lt;ul&gt;
&lt;li&gt;分隔符字符串里不会出现&lt;/li&gt;
&lt;li&gt;分隔符的排序要小于所有字符&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;图中染色的依据是prefix是哪个串里的就染成什么颜色&lt;/li&gt;
&lt;li&gt;开始滑窗比较&lt;ul&gt;
&lt;li&gt;滑窗必须要能包含k种颜色&lt;/li&gt;
&lt;li&gt;所以滑窗大小不是固定的，有时候相邻几个都是来自同一个字符串&lt;/li&gt;
&lt;li&gt;滑窗里除0外的最小值，就是符合条件的最大共同长度，如图3，最大匹配长度是2&lt;/li&gt;
&lt;li&gt;课程里动画演示滑窗其实不是用滑的，而是用的爬行&lt;ul&gt;
&lt;li&gt;即下界往下，包含了所有颜色之后，上界也往下，这样蠕行前进，每一步判断滑窗里的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;额外需要一个hash table来保存切片与颜色的映射关系。&lt;ul&gt;
&lt;li&gt;如果是例子这么简单，我可以直接检查第一个出现的分隔符，是#就是绿色，出现$就是蓝色，%就是红色&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;核心就是：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;取子串是从后向前取的&lt;/li&gt;
&lt;li&gt;但比较是从前向后比的&lt;/li&gt;
&lt;li&gt;前面的元素可能来自任何一个子串（只要足够长）&lt;/li&gt;
&lt;li&gt;从前面排序，客观上就把来自不同字符串的相同字母打头的子串给排到一起了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这就是为什么在&lt;code&gt;Suffix&lt;/code&gt; Array的内容里面出现Longest Common &lt;code&gt;Prefix&lt;/code&gt;的内容的原因了.&lt;/p&gt;&lt;p&gt;聪明。&lt;/p&gt;&lt;h2&gt;Longest Repeated Substring (LRS)&lt;/h2&gt;
&lt;figure style="flex: 72.68464243845251" &gt;&lt;img loading="lazy" width="1240" height="853" src="https://cdn.jsdelivr.net/gh/wzywalker/wzywalker.github.io@main/archives/assets/ef47276f994f76ccabc2c60900227916.png" /&gt;&lt;/figure&gt;&lt;p&gt;这个比暴力遍历要简单太多，直接找LCP最大值即可&lt;/p&gt;</description><author>hi@imalan.cn (walker)</author><guid isPermaLink="true">/archives/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87%E4%B8%83%EF%BC%9ASuffix-Array%2C-Longest-Common-Prefix-%28LCP%29-array/</guid><pubDate>Fri, 12 Nov 2021 06:00:00 +0806</pubDate></item><item><title>数据结构篇八：Balanced-Binary-Search-Trees(BBST)</title><link>/archives/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87%E5%85%AB%EF%BC%9ABalanced-Binary-Search-Trees%28BBST%29/</link><description>&lt;p&gt;这是一位 google 工程师分享的8小时的&lt;a href="https://www.youtube.com/watch?v=RBSGKlAvoiM"&gt;数据结构&lt;/a&gt;的视频,我的笔记&lt;/p&gt;&lt;hr /&gt;
&lt;h1&gt;Balanced Binary Search Trees (BBST)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;满足low (logarithmic) height for fast insertions and deletions&lt;/li&gt;
&lt;li&gt;clever usage of a &lt;code&gt;tree invairant&lt;/code&gt; and &lt;code&gt;tree rotation&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;AVL Tree&lt;/h2&gt;
&lt;p&gt;一种BBST，满足O(log n)的插入删除和查找复杂度，也是第一种BBST，后续出现的更多的：2-3 tree, AA tree, scapegoat tree, red-black tree(avl的最主要竞争对手)&lt;/p&gt;&lt;p&gt;能保持平衡的因子：Balance Factor (&lt;code&gt;BF&lt;/code&gt;)&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;BF(node) = H(node.right) - H(node.left)&lt;/li&gt;
&lt;li&gt;H(x) = height of node = # of edges between (x, furthest leaf)&lt;/li&gt;
&lt;li&gt;平衡就是左右平均分配，所以要么均分，要么某一边多一个，BF其实就是(-1, 0, 1)里的一个了 &amp;lt;- avl tree invariant&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个node需要存：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;本身的(comparable) value&lt;/li&gt;
&lt;li&gt;balance factor&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;height&lt;/code&gt; of this node&lt;/li&gt;
&lt;li&gt;left/right pointer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使树保持左右平衡主要是靠rotation，极简情况下（三个node），我们有两种基本情况（left-left, right-right），有其它情况就旋转一次变成这两种情况之一：
&lt;figure style="flex: 87.44710860366713" &gt;&lt;img loading="lazy" width="1240" height="709" src="https://cdn.jsdelivr.net/gh/wzywalker/wzywalker.github.io@main/archives/assets/3b702bd1d181c924971298b096c7c548.png" /&gt;&lt;/figure&gt;&lt;/p&gt;&lt;h2&gt;Insertion&lt;/h2&gt;
&lt;p&gt;一次插入需要考虑的是，插在哪边，以及插入后对bf, height和balance的破坏
&lt;figure style="flex: 60.546875" &gt;&lt;img loading="lazy" width="1240" height="1024" src="https://cdn.jsdelivr.net/gh/wzywalker/wzywalker.github.io@main/archives/assets/7aec7390101d933c2d50971e2733effe.png" /&gt;&lt;/figure&gt;&lt;/p&gt;&lt;p&gt;其中修复平衡就是上图中几个基本结构的转换&lt;/p&gt;&lt;h2&gt;Removal&lt;/h2&gt;
&lt;p&gt;avl树就是一棵BST，删除节点分两步：&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;按照bst的方法查找节点，即小的在左边找，大的在右边找&lt;/li&gt;
&lt;li&gt;也按bst的原则删除元素，即找到元素后，把左边的最大值或右边的最小值拿过来补上删除的位置&lt;/li&gt;
&lt;li&gt;这一步是多出来的，显然是要更新一下节点的bf和height，及重新balance一次了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;前两部分参考BST一章，流程伪代码：&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="c1"&gt;# Code for BST item removal here&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="c1"&gt;# Update balance factor&lt;/span&gt;
    &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Rebalance tree&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description><author>hi@imalan.cn (walker)</author><guid isPermaLink="true">/archives/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87%E5%85%AB%EF%BC%9ABalanced-Binary-Search-Trees%28BBST%29/</guid><pubDate>Fri, 12 Nov 2021 07:00:00 +0806</pubDate></item><item><title>数据结构篇九：Indexed-Priority-Queue</title><link>/archives/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87%E4%B9%9D%EF%BC%9AIndexed-Priority-Queue/</link><description>&lt;p&gt;这是一位 google 工程师分享的8小时的&lt;a href="https://www.youtube.com/watch?v=RBSGKlAvoiM"&gt;数据结构&lt;/a&gt;的视频,我的笔记&lt;/p&gt;&lt;hr /&gt;
&lt;h1&gt;Indexed Priority Queue&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;a traditional priority queue variant&lt;/li&gt;
&lt;li&gt;top node supports &lt;code&gt;quick update and deletions of key-value paris&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure style="flex: 77.8894472361809" &gt;&lt;img loading="lazy" width="1240" height="796" src="https://cdn.jsdelivr.net/gh/wzywalker/wzywalker.github.io@main/archives/assets/5e238bf5e89b7b2188cfb748c4e5990e.png" /&gt;&lt;/figure&gt;&lt;p&gt;观察这个图，数据是Anna, Bella...等等，&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;首先，为这一堆数据进行任意排序，得到一堆索引(0,1,...)&lt;/li&gt;
&lt;li&gt;然后组一个binary heap，这样每个元素又获得一个索引，就是在heap上的序号（&lt;code&gt;Position Map&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过两组索引迅速找到key（就是人名）在堆中的位置，比如：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;George，ki = 6, pm = 1&lt;/li&gt;
&lt;li&gt;kelly, ki = 10, pm = 10&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在能迅速找到数据源在堆上的位置了，那么如果反过来呢？比如堆上索引3是数据源的谁？&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;pm = 3 -&amp;gt; ki = 8 -&amp;gt; Issac &lt;strong&gt;BINGO!!!&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但神奇的事发生了，有人希望复用ki这个自然数序列（闲的蛋疼？），于是多做了一个数组，把ki定义为heap上的索引，与元素原来的ki进行映射（&lt;code&gt;Inverse Map&lt;/code&gt;）:IM
&lt;figure style="flex: 68.88888888888889" &gt;&lt;img loading="lazy" width="1240" height="900" src="https://cdn.jsdelivr.net/gh/wzywalker/wzywalker.github.io@main/archives/assets/71be1add8c1a0cde72e08fc72adbd071.png" /&gt;&lt;/figure&gt;&lt;/p&gt;&lt;p&gt;可以看到，这张图上张个ki到im的映射，与pm到ki的映射其实是一样的，也就是说重定义了一下，并没有引入新的东西。(pm表里找到3，对应的第一行ki表里就是8）&lt;/p&gt;&lt;p&gt;这个时候，我们直接用ki的3就能找到im的8，继而找到数据源的&lt;em&gt;Issac&lt;/em&gt;了。&lt;/p&gt;&lt;h2&gt;Insertion&lt;/h2&gt;
&lt;p&gt;上面的数组，我们往里面添加第12条数据试试:&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;{ki:12, pm: 12, im:12, value:2}&lt;/li&gt;
&lt;li&gt;显然违反了binary heap的 invariant，向上冒泡，也就是跟{ki:12, pm:5, im:2, value:4}的节点互换&lt;/li&gt;
&lt;li&gt;此时，数据源肯定不会变，但是节点变了，pm的值就要交换（5， 12 互换）&lt;/li&gt;
&lt;li&gt;pm变了，把pm当成ki的映射表im也要变（12， 11互换）&lt;/li&gt;
&lt;/ul&gt;
&lt;figure style="flex: 224.63768115942028" &gt;&lt;img loading="lazy" width="1240" height="276" src="https://cdn.jsdelivr.net/gh/wzywalker/wzywalker.github.io@main/archives/assets/47da2e700214e5e2de16aa42f5b92fb3.png" /&gt;&lt;/figure&gt;&lt;p&gt;仔细观察图片，搞清楚第一行ki在两次互换时的身份就明白了&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;pm的互换是直观的，就是节点的位置&lt;/li&gt;
&lt;li&gt;知道pm互换的依据后（2，5），在第一行找2，5对应的im值互换，因为在这个映射里，相当于pm与原ki的映射，pm此时是（2，5）了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同样逻辑继续冒泡就是了。&lt;/p&gt;&lt;p&gt;pseudo code:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Inserts a value into the min indexed binary &lt;/span&gt;
&lt;span class="c1"&gt;# heap. The key index must not already be in &lt;/span&gt;
&lt;span class="c1"&gt;# the heap and the value must not be null. &lt;/span&gt;
&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ki&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ki&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="c1"&gt;# ‘sz’ is the current size of the heap&lt;/span&gt;
    &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ki&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sz&lt;/span&gt;  &lt;span class="c1"&gt;# 对应上图，意思就第一行索引器是ki&lt;/span&gt;
    &lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sz&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ki&lt;/span&gt;  &lt;span class="c1"&gt;# 对应上图，意思就是一行索引器是pm&lt;/span&gt;
    &lt;span class="n"&gt;swim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sz&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;# 这里传进去的pm，即heap上节点的索引&lt;/span&gt;
    &lt;span class="n"&gt;sz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sz&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="c1"&gt;# 添加成功，size加1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;理论上，添加元素到最后一个, sz和ki应该是相等的（因为都是尾巴上）&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Swims up node i (zero based) until heap &lt;/span&gt;
&lt;span class="c1"&gt;# invariant is satisfied.&lt;/span&gt;
&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;swim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# 比父节点小就冒泡，注意入参i是节点上的索引，即pm&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;less&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt; 
        &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 所以这里传的也是pm&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="c1"&gt;# 我们交换了节点，需要交换pm表里的值，和im表里的值&lt;/span&gt;
    &lt;span class="c1"&gt;# 交换pm的值需要数据源的索引，即ki，而ki能从im表里用pm算出来&lt;/span&gt;
    &lt;span class="c1"&gt;# 所以ki = im[pm] 这里i,j是pm，所以im[i]自然就是i对应ki&lt;/span&gt;
    &lt;span class="c1"&gt;# pm[ki]当然就是pm[im[i]]了：&lt;/span&gt;
    &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
    &lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;less&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;还是那句话，理解清楚那三行映射表里第一行的动态含义，就不会有问题。&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;pm表要key index来索引&lt;/li&gt;
&lt;li&gt;im表要node index来索引&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在操作时，只需要知道传入的是哪种索引，及时转化就行了。&lt;/p&gt;&lt;p&gt;有了索引，lookup的时间复杂度就是常量时间了：O(1)&lt;/p&gt;&lt;h2&gt;Polling and Removals&lt;/h2&gt;
&lt;p&gt;没有什么特殊的,仍然是找到节点,与最后一个交换,移除最后一个节点,然后再看最后一个在堆里是上升还是下降.
仍然是记得每一步交换,相应的几个索引值也需要随之交换.(polling 其实就是移除第1个节点,本质上还是 removal)
&lt;figure style="flex: 36.70811130846655" &gt;&lt;img loading="lazy" width="1240" height="1689" src="https://cdn.jsdelivr.net/gh/wzywalker/wzywalker.github.io@main/archives/assets/581b8563020c36307eae7a9bf618a7e0.png" /&gt;&lt;/figure&gt;&lt;/p&gt;&lt;p&gt;pseudo code&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Deletes the node with the key index ki&lt;/span&gt;
&lt;span class="c1"&gt;# in the heap. The key index ki must exist &lt;/span&gt;
&lt;span class="c1"&gt;# and be present in the heap.&lt;/span&gt;
&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ki&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# 注意，这里送进来的是ki，而不是node index(pm)&lt;/span&gt;
    &lt;span class="c1"&gt;# 说明业务需求一般是操作数据源，而不是操作堆&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ki&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    &lt;span class="c1"&gt;# 转成节点索引&lt;/span&gt;
    &lt;span class="n"&gt;sz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sz&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="c1"&gt;# 与最后一个元素交换，用size来做节点索引&lt;/span&gt;

    &lt;span class="c1"&gt;# 下面三个子函数送入的就是节点索引了&lt;/span&gt;
    &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sz&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;sink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;swim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ki&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;  &lt;span class="c1"&gt;# 数据源对应的值置空，所以用ki&lt;/span&gt;
    &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ki&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;        &lt;span class="c1"&gt;# 数据源对应的节点置空，所以用ki&lt;/span&gt;
    &lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sz&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;        &lt;span class="c1"&gt;# 反查表用节点索引，此处size就是最后一个节点的索引&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;sink pseudo code&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Sinks the node at index i by swapping &lt;/span&gt;
&lt;span class="c1"&gt;# itself with the smallest of the left &lt;/span&gt;
&lt;span class="c1"&gt;# or the right child node.&lt;/span&gt;
&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;sink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# 这是堆操作,传入的索引也是节点索引,没问题&lt;/span&gt;
    &lt;span class="c1"&gt;# sink是下沉，但不是跟BTS一样找左侧最大右则最小那种直接换&lt;/span&gt;
    &lt;span class="c1"&gt;# 而是一层层往下换&lt;/span&gt;
    &lt;span class="c1"&gt;# 即一次while只跟左右子级比大小，确实比子级还小的话，就替换，然后再跟下一层比较&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# 利用二叉树特性算出子节点&lt;/span&gt;
        &lt;span class="c1"&gt;# 默认左边最小，然后再看右边是不是更小&lt;/span&gt;
        &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="n"&gt;smallest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;
    &lt;span class="c1"&gt;# 右边不越界，且小于左边，就设右边&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;sz&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;less&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;smallest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;
    &lt;span class="c1"&gt;# 左侧都越界了，或已经比最小值大了，说明不需要下沉了&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;sz&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;less&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;smallest&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="c1"&gt;# 只要没有break，说明能交换，然后把交换后的作为下一个循环的起点&lt;/span&gt;
    &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;smallest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smallest&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Updates&lt;/h2&gt;
&lt;p&gt;更新节点要简单的多:&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;用ki找到value，把值更新&lt;/li&gt;
&lt;li&gt;然后根据新value实际情况上浮或下沉&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Updates the value of a key in the binary &lt;/span&gt;
&lt;span class="c1"&gt;# heap. The key index must exist and the&lt;/span&gt;
&lt;span class="c1"&gt;# value must not be null.&lt;/span&gt;
&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ki&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ki&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ki&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="n"&gt;sink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;swim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Decrease and Increase key&lt;/h2&gt;
&lt;p&gt;不好说，先看代码吧：&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# For both these functions assume ki and value &lt;/span&gt;
&lt;span class="c1"&gt;# are valid inputs and we are dealing with a&lt;/span&gt;
&lt;span class="c1"&gt;# min indexed binary heap.&lt;/span&gt;
&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;decreaseKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ki&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;less&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ki&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt; 
        &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ki&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; 
        &lt;span class="n"&gt;swim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ki&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;increaseKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ki&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;less&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ki&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ki&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; 
        &lt;span class="n"&gt;sink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ki&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代码里是跟一个固定值比较，只要ki对应的值比它大(desreaseKey)或小(increaseKey），就用这个固定值来替换它，并且在value改变后根据实际情况上浮或下沉。&lt;/p&gt;</description><author>hi@imalan.cn (walker)</author><guid isPermaLink="true">/archives/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AF%87%E4%B9%9D%EF%BC%9AIndexed-Priority-Queue/</guid><pubDate>Fri, 12 Nov 2021 08:00:00 +0806</pubDate></item><item><title>Thread-in-iOS</title><link>/archives/Thread-in-iOS/</link><description>&lt;p&gt;《Programming iOS 14: Dive Deep into Views, View Controllers, and Frameworks》第25章&lt;/p&gt;&lt;hr /&gt;
&lt;h1&gt;Thread&lt;/h1&gt;
&lt;p&gt;Thread在开发过程中基本上线程是隐形的，你感知不到，因为大多数情况下，程序只（需要）跑在主线程上，这是没有问题的：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;你的代码事实上执行得非常快，你感知不到&lt;/li&gt;
&lt;li&gt;响应逻辑过程锁死UI，是安全的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原生的后台线程：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;动画：The Core Animation framework is running the animation and updating the presentation layer on a background thread.&lt;/li&gt;
&lt;li&gt;网络：A web view’s fetching and loading of its content is asynchronous&lt;/li&gt;
&lt;li&gt;影音：Sounds are played asynchronously. Loading, preparation, and playing of movies happens asynchronously.&lt;/li&gt;
&lt;li&gt;存盘：UIDocument saves and reads on a background thread.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但所有的&lt;code&gt;complete functions / delegations / notification&lt;/code&gt; 都是在主线程被调用的&lt;/p&gt;&lt;p&gt;多线程的问题&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;调用时机/顺序不可控，次数也不可控，随时可能被执行&lt;/li&gt;
&lt;li&gt;数据的线程安全，不得不借助“锁”的机制来保证（race condition）&lt;ul&gt;
&lt;li&gt;a lock is an &lt;code&gt;invitation&lt;/code&gt; to &lt;em&gt;forget&lt;/em&gt; to use the lock, or to &lt;em&gt;forget&lt;/em&gt; to remove the lock after you’ve set it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The lifetime of a thread is independent of the lifetimes of other objects in your app.&lt;ul&gt;
&lt;li&gt;一个对象的退出不能保证有后台线程将来会调用它 -&amp;gt; 闪退或Zombie&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hard to debug.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;XCode对debug的支持：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;Debug navigator&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NSLog / os_log / Logger&lt;/code&gt; outputs&lt;/li&gt;
&lt;li&gt;Instruments &amp;gt; Time Profiler&lt;/li&gt;
&lt;li&gt;Thread Sanitizer, Main Thread Checker (项目配置 &amp;gt; Diagnostics)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;执行后台线程的方法：&lt;/p&gt;&lt;h2&gt;Manual Threading&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;performSelector(inBackground:with:)&lt;/code&gt;&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;只能传一个参数，多个参数要打包&lt;/li&gt;
&lt;li&gt;手动管理内存 -&amp;gt; wrap every thing in an autorelease pool&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;drawThatPuppy&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makeBitmapContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;center&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;
        &lt;span class="c1"&gt;// 这里打包参数为一个字典&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;d&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;AnyHashable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;center&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;bounds&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;zoom&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;performSelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inBackground&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;#selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reallyDraw&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// trampoline, background thread entry point&lt;/span&gt;
&lt;span class="kr"&gt;@objc&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;reallyDraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;_&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;AnyHashable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 手动控制内存&lt;/span&gt;
    &lt;span class="n"&gt;autoreleasepool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;center&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="n"&gt;CGPoint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bounds&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="n"&gt;CGRect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;zoom&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="n"&gt;CGFloat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;// 手动回调主线程&lt;/span&gt;
        &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;performSelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;onMainThread&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;#selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allDone&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;waitUntilDone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// called on main thread! background thread exit point&lt;/span&gt;
&lt;span class="kr"&gt;@objc&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;allDone&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setNeedsDisplay&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;即便如此，还是没有解决不同线程使用同一个实例变量（如&lt;code&gt;bitmapContext&lt;/code&gt;）造成程序非常脆弱的问题，得进一步使用&lt;code&gt;lock&lt;/code&gt;等机制。&lt;/p&gt;&lt;h2&gt;Operation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;将&lt;code&gt;thread&lt;/code&gt;封装成&lt;code&gt;task&lt;/code&gt;，表示成&lt;code&gt;Operation&lt;/code&gt; 通过 &lt;code&gt;OperationQueue&lt;/code&gt;来操作。&lt;/li&gt;
&lt;li&gt;回调机制变成了通知机制（或&lt;code&gt;KVO&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;queue&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;OperationQueue&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;q&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OperationQueue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;// ... further configurations can go here ...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;
&lt;span class="p"&gt;}()&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;drawThatPuppy&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;center&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;
    &lt;span class="c1"&gt;// 也可以用 BlcokOperation&lt;/span&gt;
    &lt;span class="c1"&gt;// 来执行你的耗时操作&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;op&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyMandelbrotOperation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// 通知/回调&lt;/span&gt;
    &lt;span class="n"&gt;NotificationCenter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;#selector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operationFinished&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MyMandelbrotOperation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mandelOpFinished&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// 结合起来&lt;/span&gt;
    &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addOperation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而一个&lt;code&gt;Operation&lt;/code&gt;子类包含两个部分：&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;A designated initializer&lt;ul&gt;
&lt;li&gt;你可以把需要的参数设计成对应的属性，并初始化好它&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A main method&lt;ul&gt;
&lt;li&gt;耗程序真正执行的地方，OperationQueue执行到这个Operation的时候就会被自动执行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyMandelbrotOperation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Operation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;mandelOpFinished&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mandelOpFinished&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// 1. params -&amp;gt; arguments&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;center&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CGPoint&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;bounds&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CGRect&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;zoom&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CGFloat&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;set&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;bitmapContext&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CGContext&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;  &lt;span class="c1"&gt;// 封装成了类属性，不再线程共享&lt;/span&gt;
    &lt;span class="kd"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGPoint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bounds&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGRect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;zoom&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGFloat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
        &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bounds&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
        &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zoom&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;
        &lt;span class="kc"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// 1.1 logic&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;MANDELBROT_STEPS&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;makeBitmapContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGSize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// ... same as before&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGPoint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGRect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGFloat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// ... same as before&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// 2. main&lt;/span&gt;
    &lt;span class="kr"&gt;override&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// 首先要检查isCancelled&lt;/span&gt;
        &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isCancelled&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makeBitmapContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isCancelled&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// 完成通知，也可以用KVO机制&lt;/span&gt;
            &lt;span class="c1"&gt;// 主线程接收到后要立即处理，因为OpearationQueue将会立即释放这个Operation&lt;/span&gt;
            &lt;span class="c1"&gt;// 此外，接收通知可能也不在主线程，-&amp;gt; GCD&lt;/span&gt;
            &lt;span class="n"&gt;NotificationCenter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MyMandelbrotOperation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mandelOpFinished&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// 3. observer&lt;/span&gt;
&lt;span class="c1"&gt;// 就是前面在主线程里注册监听消息的方法&lt;/span&gt;
&lt;span class="c1"&gt;// warning! called on background thread&lt;/span&gt;
&lt;span class="kr"&gt;@objc&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;operationFinished&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;_&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Notification&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;op&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;MyMandelbrotOperation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// 1. 主线程（GCD）&lt;/span&gt;
        &lt;span class="n"&gt;DispatchQueue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// 2. 移除通知监听&lt;/span&gt;
            &lt;span class="n"&gt;NotificationCenter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;removeObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MyMandelbrotOperation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mandelOpFinished&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bitmapContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bitmapContext&lt;/span&gt;  &lt;span class="c1"&gt;// 传回这个之前是线程共享的变量&lt;/span&gt;
            &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setNeedsDisplay&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意&lt;code&gt;bitmapContext&lt;/code&gt;这个之前主线程设置，然后后台线程共享的变量，现在由Operation这个类自己持有，结束时才赋值回主线程。&lt;/p&gt;&lt;p&gt;此外，还能限制并发数量：&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;q&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OperationQueue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maxConcurrentOperationCount&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This turns the OperationQueue into a &lt;code&gt;serial queue&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;最后，解决最后一个问题，即你的调用者都没了，比如ViewController没了，调用者没了，后台任务也理应取消（下载、存盘类不需要UI交互的除外）&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;deinit&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cancelAllOperations&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;至此，前面提到的一些多线程会带来的问题如调用时机和数量不可控，跨线程数据安全，以及生命周期等问题，&lt;code&gt;Operation&lt;/code&gt;都完美解决并封装了。&lt;/p&gt;&lt;p&gt;设置优先级，QoS, 依赖等一些进阶示例：&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;backgroundOperation&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;NSOperation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;backgroundOperation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;queuePriority&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Low&lt;/span&gt;
&lt;span class="n"&gt;backgroundOperation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qualityOfService&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;operationQueue&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;NSOperationQueue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mainQueue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;operationQueue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addOperation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;backgroundOperation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// dependence&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;networkingOperation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;NSOperation&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;resizingOperation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;NSOperation&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;resizingOperation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addDependency&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;networkingOperation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;operationQueue&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;NSOperationQueue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mainQueue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// 虽然resizing添加了network为依赖，但是还是需要全部加到队列里&lt;/span&gt;
&lt;span class="c1"&gt;// 不要以为加了尾部operation就能把依赖全加进去&lt;/span&gt;
&lt;span class="n"&gt;operationQueue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addOperations&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;networkingOperation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resizingOperation&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;waitUntilFinished&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Grand Central Dispatch&lt;/h2&gt;
&lt;p&gt;可以认为GCD是更底层的Operation，它甚至直接嵌入了操作系统，能被任何代码执行而且非常高效。调用过程也与Operation差不多:&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;表示一个task&lt;/li&gt;
&lt;li&gt;加入一个queue&lt;ul&gt;
&lt;li&gt;GCD Queue也被表示成了&lt;em&gt;dispatch queue&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;a lightweight opaque pseudo-object consisting essentially of &lt;code&gt;a list of functions&lt;/code&gt; to be executed.&lt;/li&gt;
&lt;li&gt;如果自定义这个queue，它默认状态下是&lt;code&gt;serial queue&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;MANDELBROT_STEPS&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;bitmapContext&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CGContext&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;draw_queue&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DispatchQueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;com.neuburg.mandeldraw&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// 改造一个返回前述跨线程变量的方法&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;makeBitmapContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGSize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;CGContext&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ... as before ...&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;context&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CGContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;bitsPerComponent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bytesPerRow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bitmapBytesPerRow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;space&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;colorSpace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bitmapInfo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;prem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// 相应方法增加这个context参数，而不是从环境里取&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGPoint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGRect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGFloat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// ... as before, but we refer to local context, not self.bitmapContext&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// 剩下的，一个block搞定：&lt;/span&gt;
&lt;span class="c1"&gt;// UI触发的事件&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;drawThatPuppy&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;center&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;bounds&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bounds&lt;/span&gt;
    &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw_queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// 下面两行代码虽然用到了self，但是它们没有改变任何属性，是线程安全的&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;bitmap&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makeBitmapContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;center&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bitmap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;DispatchQueue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bitmapContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bitmap&lt;/span&gt;
            &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setNeedsDisplay&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到，相比Operation把代码结构都改了，GCD几乎只是包了一层block，代码变动非常少。（唯一的发动就是把所有执行代码的变量都需要通过参数机制传进去）。&lt;/p&gt;&lt;p&gt;同时， &lt;em&gt;center, bounds&lt;/em&gt;等参数，直接从环境里取，这是block机制带来的便利；同样的机制也被用在了线程共享的变量传回主线程时，因为对第二层block而言，第一层block就是它的&lt;code&gt;higher surrounding scope&lt;/code&gt;，是能看到它的&lt;em&gt;bitmap&lt;/em&gt;变量的。 -&amp;gt; 我们并没有从头到尾retrive一个&lt;code&gt;self.bitmap&lt;/code&gt;变量，也就不存在data sharing。&lt;/p&gt;&lt;p&gt;不像Operation把耗时操作写在别处，GCD的方式易读性更高。&lt;/p&gt;&lt;p&gt;除了有&lt;code&gt;.async(execute:)&lt;/code&gt;，还有&lt;code&gt;asyncAfter(deadline:execute:)&lt;/code&gt;和&lt;code&gt;sync(execute:)&lt;/code&gt;，望文生义，就不多介绍了。&lt;/p&gt;&lt;h3&gt;Dispatch Groups&lt;/h3&gt;
&lt;p&gt;group提供了监听(wait)一组后台线程全部执行结束的功能：&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;outerQueue&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DispatchQueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;outer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;innerQueue&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DispatchQueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;inner&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;group&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DispatchGroup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;outerQueue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;series&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;123456789&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;series&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;// flag 1&lt;/span&gt;
        &lt;span class="n"&gt;innerQueue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asyncAfter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;deadline&lt;/span&gt;&lt;span class="p"&gt;:.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;milliseconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="bp"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;terminator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leave&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// flag 2&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; 
        &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;// 一旦加了这句话，这9个线程就变成线性的了，注释掉，就是9个线程随机先后执行&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// 可见这个notify等同于wait_all&lt;/span&gt;
    &lt;span class="c1"&gt;// 当enter次数与leave次数一致时触发&lt;/span&gt;
    &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DispatchQueue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="bp"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;done&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;One-Time Execution&lt;/h3&gt;
&lt;p&gt;Objective-C中实现单例的&lt;code&gt;dispatch_once&lt;/code&gt;其实就是GCD的内容，而在Swift中这个方法就没有了，也没用GCD去实现了:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;globalOnce&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Void&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="bp"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;once in a lifetime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// once, at most&lt;/span&gt;
&lt;span class="p"&gt;}()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个print只会打印一次。而如果是用在对象中，可以声明为&lt;code&gt;lazy&lt;/code&gt;：&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ViewController&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;UIViewController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kr"&gt;lazy&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;instanceOnce&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Void&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="bp"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;once in an instance&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// once per instance, at most&lt;/span&gt;
        &lt;span class="p"&gt;}()&lt;/span&gt;
&lt;span class="c1"&gt;// ... }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;instanceOnce&lt;/code&gt;这个变量也只会初始化一次。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Bonus&lt;/strong&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// 并发&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;queue&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DispatchQueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;queue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concurrent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// 条件， check the queue&lt;/span&gt;
&lt;span class="n"&gt;dispatchPrecondition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onQueue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw_queue&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;App Backgrounding&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;应用进入后台时，iOS系统会给应用&lt;code&gt;小于5秒&lt;/code&gt;的时间来结束当前的任务&lt;/li&gt;
&lt;li&gt;可以用&lt;code&gt;UIApplication.shared.beginBackgroundTask(expirationHandler:)&lt;/code&gt;来申请更长的时间（&lt;code&gt;不超过30秒&lt;/code&gt;），返回一个identifier&lt;ul&gt;
&lt;li&gt;&lt;code&gt;expirationHandler&lt;/code&gt;是一个超时还没处理完的话，系统会调的方法，&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;任务执行完后需要调用&lt;code&gt;UIApplication.shared.endBackgroundTask(_:)&lt;/code&gt;方法来结束后台时间的申请&lt;ul&gt;
&lt;li&gt;&lt;code&gt;expirationHandler&lt;/code&gt;里同样需要显式&lt;code&gt;endBackgroundTask&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;所以正常方法体和超时方法体都会有endBackgroundTask的调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;把这个特性直接封装到一个operation里去：&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BackgroundTaskOperation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Operation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;whatToDo&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;())?&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;cleanup&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;())?&lt;/span&gt;
    &lt;span class="kr"&gt;override&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isCancelled&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;bti&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UIBackgroundTaskIdentifier&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;invalid&lt;/span&gt;
        &lt;span class="n"&gt;bti&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;UIApplication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shared&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;beginBackgroundTask&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cleanup&lt;/span&gt;&lt;span class="p"&gt;?()&lt;/span&gt;
            &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="bp"&gt;UIApplication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shared&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endBackgroundTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bti&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// cancellation&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="n"&gt;bti&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;invalid&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;whatToDo&lt;/span&gt;&lt;span class="p"&gt;?()&lt;/span&gt;
        &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isCancelled&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="bp"&gt;UIApplication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shared&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endBackgroundTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bti&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// completion&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// 调用&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;task&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BackgroundTaskOperation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;whatToDo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;myQueue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addOperation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样，&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;正常情况下会执行&lt;code&gt;whatToDo()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果应用被挂到后台，因为注册过后台任务，有小于30秒的时间跑完任务&lt;/li&gt;
&lt;li&gt;如果顺利跑完，你把应用切到前台，会发现UI已经更新了&lt;/li&gt;
&lt;li&gt;超时也没跑完，就会进入超时的block里去取消任务了，UI上也得不到结果&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;最后，要知道所谓的申请时长，并不是在&lt;em&gt;didEnterBackground&lt;/em&gt;之类的方法里去做的，而是做任务的时候就直接注册了，是不是很麻烦？&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2&gt;Background Processing&lt;/h2&gt;
&lt;p&gt;相比向系统申请少得可怜的后台挂起时间，iOS 从13开始引入了后台任务机制，方便你执行一些用户不需要感知的任务，比如下载，或数据清理：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;路径：target &amp;gt; Signing &amp;amp; Capabilities &amp;gt; Background processing&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;Background Task framework&lt;/code&gt;, need to import &lt;code&gt;BackgroundTasks&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Info.plist&lt;/em&gt; &amp;gt; add &amp;quot;Permitted background task schedule identifiers&amp;quot; key (&lt;code&gt;BTTaskSchedulerPermittedIdentifiers&lt;/code&gt;), 任意标识字符串，比如反域名&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;appDelegate&lt;/code&gt;里面去实现需要后台执行的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;涉及到两个类:&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BGProcessingTaskRequest&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;didEnterBackground&lt;/code&gt;方法里调用&lt;/li&gt;
&lt;li&gt;需要match &lt;em&gt;plist.info&lt;/em&gt;里的id&lt;/li&gt;
&lt;li&gt;注册是否通电/有网/延迟执行（ExternalPower / Network / earliestBeginDate）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BGTaskScheduler&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;application(_:didFinishLaunchingWithOptions:)&lt;/code&gt;里执行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;register(forTaskWithIdentifier:using:launchHandler:)&lt;/code&gt;方法&lt;ul&gt;
&lt;li&gt;id: matching plist.info&lt;/li&gt;
&lt;li&gt;using: dispatch queue&lt;/li&gt;
&lt;li&gt;handler: &lt;code&gt;BGTask&lt;/code&gt; object&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;BGTask&lt;/code&gt;的超时方法里，和正常执行的代码里，均需调用&lt;code&gt;setTaskCompleted(_:bool)&lt;/code&gt;方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;taskid&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;com.neuburg.matt.lengthy&amp;quot;&lt;/span&gt;
&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;_&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;UIApplication&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;didFinishLaunchingWithOptions&lt;/span&gt; &lt;span class="n"&gt;launchOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;UIApplication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LaunchOptionsKey&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]?)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// let v = MyView()&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;BGTaskScheduler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shared&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;forTaskWithIdentifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;taskid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DispatchQueue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
        &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expirationHandler&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setTaskCompleted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;//... my task logic&lt;/span&gt;
        &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setTaskCompleted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// might check `ok` here&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;applicationDidEnterBackground&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;_&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;UIApplication&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// might check to see whether it&amp;#39;s time to submit this request&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;req&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;BGProcessingTaskRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;taskid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="bp"&gt;BGTaskScheduler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shared&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Debug&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;打满&lt;em&gt;print&lt;/em&gt;和断点&lt;/li&gt;
&lt;li&gt;设备上，把应用送到后台再拉到前台&lt;/li&gt;
&lt;li&gt;Xcode上暂停app&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(lldb) e -l objc -- (void)[[BGTaskScheduler sharedScheduler] _simulateLaunchForTaskWithIdentifier:@&amp;quot;my_id&amp;quot;]&lt;/code&gt; 模拟launching&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(lldb) e -l objc -- (void)[[BGTaskScheduler sharedScheduler] _simulateExpirationForTaskWithIdentifier:@&amp;quot;my_id&amp;quot;]&lt;/code&gt; 模拟超时&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;控制台输入&lt;code&gt;continue&lt;/code&gt;, 运行task function&lt;/li&gt;
&lt;li&gt;当&lt;code&gt;task.setTaskComplete(success: true)&lt;/code&gt; 被调用，控制台输出：“Marking simulated task complete,”&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;BGAppRefreshTaskRequest&lt;/h3&gt;
&lt;p&gt;not mentioned&lt;/p&gt;</description><author>hi@imalan.cn (walker)</author><guid isPermaLink="true">/archives/Thread-in-iOS/</guid><pubDate>Fri, 26 Nov 2021 00:00:00 +0806</pubDate></item><item><title>理解Core-Graphics的Clipping和填充模式</title><link>/archives/%E7%90%86%E8%A7%A3Core-Graphics%E7%9A%84Clipping%E5%92%8C%E5%A1%AB%E5%85%85%E6%A8%A1%E5%BC%8F/</link><description>&lt;p&gt;先来看一个例子
&lt;figure style="flex: 38.76146788990825" &gt;&lt;img loading="lazy" width="338" height="436" src="https://cdn.jsdelivr.net/gh/wzywalker/wzywalker.github.io@main/archives/assets/d5fdc49bd6037d399e4685d3cf9d72bf.png" /&gt;&lt;/figure&gt;
画一个箭头，其中箭尾有分叉，一般来说，是画一个三角，画一个矩形（实心矩形一般也直接用很粗的线条），最后再叠一个三角（with &lt;code&gt;CGBlendModel.clear&lt;/code&gt;)，这里就不多介绍了：&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;override&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;_&lt;/span&gt; &lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CGRect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;       
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;p&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;UIBezierPath&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;// shaft&lt;/span&gt;
    &lt;span class="bp"&gt;UIColor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lineWidth&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;// point&lt;/span&gt;
    &lt;span class="bp"&gt;UIColor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;removeAllPoints&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;// snip&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;removeAllPoints&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;110&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGBlendMode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们来看看&lt;code&gt;clipping&lt;/code&gt;怎么用&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;fill三角箭头（出于堆叠上目的可以最后画）&lt;/li&gt;
&lt;li&gt;找到箭尾的三个顶点&lt;ul&gt;
&lt;li&gt;用&lt;code&gt;boundingBoxOfClipPath&lt;/code&gt;来创建整个画板大小的矩形&lt;/li&gt;
&lt;li&gt;应用&lt;code&gt;clipping&lt;/code&gt;把小三角挖掉&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;3，画一根黄色箭柄粗细的线（从底向上）
    * 因为小三角区域被clipping掉了，结果就成了图示的模样&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;override&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;_&lt;/span&gt; &lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CGRect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// obtain the current graphics context&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;con&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UIGraphicsGetCurrentContext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;

        &lt;span class="c1"&gt;// punch triangular hole in context clipping region&lt;/span&gt;
        &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;110&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;closePath&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;// 添加整个区域为rect&lt;/span&gt;
        &lt;span class="c1"&gt;// 然后再clip设定为不渲染的区域&lt;/span&gt;
        &lt;span class="c1"&gt;// 后续的渲染全会避开这个区域&lt;/span&gt;
        &lt;span class="c1"&gt;// 我们后面把这个rect设为蓝色试试(顺便改为一个小一点的rect)&lt;/span&gt;
        &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;boundingBoxOfClipPath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="p"&gt;:.&lt;/span&gt;&lt;span class="n"&gt;evenOdd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//        con.fillPath()&lt;/span&gt;

        &lt;span class="c1"&gt;// draw the vertical line&lt;/span&gt;
        &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setStrokeColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;UIColor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cgColor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLineWidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strokePath&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c1"&gt;// draw the red triangle, the point of the arrow&lt;/span&gt;
        &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setFillColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;UIColor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cgColor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGPoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fillPath&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;能够完美run起来，但是我对clipping的机制还是有点不理解，一些关键点的讲解，和我的问题，一条条过：&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;我们用构建了箭尾的三角形，然后&lt;code&gt;closePath&lt;/code&gt;，那是因为我们只画了两条线，如果事实上第三条线连回了原点，那么这个&lt;code&gt;closePath&lt;/code&gt;就不需要了&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;（图一）演示了不close的话就直接只有两条线了&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="2"&gt;
&lt;li&gt;我想看看clipping到底发生了啥，于是注释掉了clip的那一行，得到了（图二）&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;之所以长那样是因为随后设置了stroke的参数（20像素的黄色）&lt;/li&gt;
&lt;li&gt;stroke时，画板上有三个元素：一个三角，一个矩形，一条线段，全部用20宽的黄线描边了，一切如预期&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="3"&gt;
&lt;li&gt;于是我尝试添加rect时只取了中间一小块，并涂成蓝色，不clip试试，得到（图三）。&lt;/li&gt;
&lt;li&gt;知道了新rect的位置，把clip加回来，发现箭尾有了，箭头却没了（图四）&lt;/li&gt;
&lt;li&gt;rect与clip的关系已经出来了，尝试把红三角的y通通加50，移到了蓝矩形范围内，得到证明（图五）&lt;/li&gt;
&lt;/ol&gt;
&lt;figure style="flex: 58.108108108108105" &gt;&lt;img loading="lazy" width="774" height="666" src="https://cdn.jsdelivr.net/gh/wzywalker/wzywalker.github.io@main/archives/assets/83a72f77f3c1af59c2e83c0616699ca5.png" /&gt;&lt;/figure&gt;&lt;p&gt;那么clipping到底能对哪些起作用呢？是上面的rect吗？&lt;strong&gt;当然不是&lt;/strong&gt;！&lt;/p&gt;&lt;p&gt;在clip方法被调用的时候，画布里有多少封闭元素，就会被应用clip。由于我们选择的是&lt;code&gt;evenOdd&lt;/code&gt;模式，那么就会简单计数，某像素覆盖奇数次显示，偶数次则不显示。&lt;/p&gt;&lt;p&gt;上例中，&lt;code&gt;con.clip(using:)&lt;/code&gt;方法调用时，画布里有两个封闭元素，一个三角，一个矩形，三角包在矩形里，那么计数为2，就不予显示了。&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;事实上，判定奇偶的依据是该点向外做无限长的射线，判定有几条边与射线相交。同时，同样的设定可以用来解释&lt;code&gt;.winding&lt;/code&gt;模式，即不但与相交的边有交，还与相交时，那条边是顺时针方向绘制的（+1）还是逆时针方向绘制的（-1）,总结果为0则不填充。&lt;a href="https://www.jianshu.com/p/5cf8048b083b"&gt;参考&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;那就玩一玩验证下吧&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;把矩形改成了圆圈，线宽也改小一点，得到（图一）&lt;em&gt;绿色三角形是我后加的，因为被黄实线盖住了&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;再在里面添加了一个小圆，得到（图二）&lt;/li&gt;
&lt;li&gt;这时候按照奇偶原则，小圆里的像素是偶数，而小圆里的三角则是奇数了，那么应该就只有大圆减掉小圆的部分，和小圆内的三角会被渲染了（图三），与预期一致&lt;/li&gt;
&lt;/ol&gt;
&lt;figure style="flex: 137.00564971751413" &gt;&lt;img loading="lazy" width="970" height="354" src="https://cdn.jsdelivr.net/gh/wzywalker/wzywalker.github.io@main/archives/assets/84aa194f6e13d2f92fe6e9929e5c7110.png" /&gt;&lt;/figure&gt;&lt;p&gt;现在再来回顾书上先套一个画布大小的矩形，再画一个三角形，你大概应该知道目的了（凑奇偶），我们矩形区域过小时绘制不了红色三角，纯粹也是因为奇数，往下移到矩形区域内，立马变偶数了。(当然，要在原位置渲染我们可以先中止clip:&lt;code&gt;con.resetClip()&lt;/code&gt;再绘图）&lt;/p&gt;</description><author>hi@imalan.cn (walker)</author><guid isPermaLink="true">/archives/%E7%90%86%E8%A7%A3Core-Graphics%E7%9A%84Clipping%E5%92%8C%E5%A1%AB%E5%85%85%E6%A8%A1%E5%BC%8F/</guid><pubDate>Sun, 28 Nov 2021 00:00:00 +0806</pubDate></item><item><title>View</title><link>/archives/View/</link><description>&lt;p&gt;《Programming iOS 14: Dive Deep into Views, View Controllers, and Frameworks》第1章&lt;/p&gt;&lt;hr /&gt;
&lt;h1&gt;View&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;A view knows how to draw itself into a rectangular area of the interface.&lt;/li&gt;
&lt;li&gt;A view is also a responder&lt;/li&gt;
&lt;li&gt;init:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;init(frame:)&lt;/code&gt;: init from code&lt;/li&gt;
&lt;li&gt;&lt;code&gt;init(coder:)&lt;/code&gt;: init from nib&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Window and Root View&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Window = top view, ultimate superview&lt;ul&gt;
&lt;li&gt;iPad with iOS 13+ can have multiple window&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;only one subview: rootViewController's &lt;code&gt;main view&lt;/code&gt; -&amp;gt; occupy the entirety of the window&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How an App Launches&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Swift项目自动调用了&lt;code&gt;UIApplicationMain&lt;/code&gt;方法，唯一方法，初始化了必要资源&lt;/li&gt;
&lt;li&gt;初始化&lt;code&gt;UIApplicationMain&lt;/code&gt;（你&lt;code&gt;UIApplication.shared&lt;/code&gt;的来源），及其degate class(&lt;code&gt;@UIApplicationMain&lt;/code&gt;)，并持有，贯穿app整个生命周期&lt;/li&gt;
&lt;li&gt;UIApplicationMain calls the app delegate’s &lt;code&gt;application(_:didFinish- LaunchingWithOptions:)&lt;/code&gt;, giving your code an opportunity run.&lt;/li&gt;
&lt;li&gt;UIApplicationMain creates a &lt;code&gt;UISceneSession&lt;/code&gt;, a &lt;code&gt;UIWindowScene&lt;/code&gt;, and an instance that will serve as the window scene’s &lt;code&gt;delegate&lt;/code&gt;.&lt;ul&gt;
&lt;li&gt;delegate由&lt;em&gt;plist.info / Application Scene Manifest / Delegate Class Name&lt;/em&gt; 决定 (&lt;code&gt;$(PRODUCT_MODULE_NAME).SceneDelegate&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;初始化root view&lt;ul&gt;
&lt;li&gt;UIApplicationMain根据plist判断是否使用了storyboard&lt;ul&gt;
&lt;li&gt;初始化UIWindow，并赋给scene delegate's &lt;code&gt;window&lt;/code&gt; property&lt;/li&gt;
&lt;li&gt;初始化initial view controller 并赋给window的&lt;code&gt;rootViewController&lt;/code&gt;属性&lt;/li&gt;
&lt;li&gt;UIAplicationMain call window's &lt;code&gt;makeKeyAndVisible&lt;/code&gt;呈现Interface&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;call scene delegate's &lt;code&gt;scene(_:willConnectTo:options:)&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;这里也是没用storyboard的话，手动去实现上面几步的地方&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Referring to the Windows&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;view.window&lt;/code&gt;, if it's nil means it can't be visible to the user&lt;/li&gt;
&lt;li&gt;scene delegate's &lt;code&gt;window&lt;/code&gt; property&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UIApplication.shared.windows.first!&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Do not expect that the window you know about is the app’s only window. The runtime can create &lt;code&gt;additional mysterious windows&lt;/code&gt;, such as the &lt;code&gt;UITextEffectsWindow&lt;/code&gt; and the &lt;code&gt;UIRemoteKeyboardWindow&lt;/code&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2&gt;Subview and Superview&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;曾经&lt;/strong&gt;，一个view拥有它对应的一个矩形区域，不属于它的subview的其它view在这个矩形内是看不见的，因为重绘矩形的时候是不会考虑到其它view的。同样，也不能draw到矩形区域外去。&lt;/p&gt;&lt;p&gt;OS X10.5起，苹果更新了关于View的架构，iOS也跟着改变了，subview能出现在superview之外（所以反而需要&lt;code&gt;clipping&lt;/code&gt;了），一个view也能overlap到另一个view上而无需成为其subview（后来居上）。&lt;/p&gt;&lt;p&gt;结果就是，你现在看到几个互相重叠的我色块，你再也分辨不出view之间的层次关系了。（&lt;code&gt;isDescendant(of:)&lt;/code&gt;可以检查层次关系）&lt;/p&gt;&lt;p&gt;没有清空subview的方法，所以：&lt;code&gt;myView.subviews.forEach {$0.removeFromSuperview()}&lt;/code&gt;&lt;/p&gt;&lt;h2&gt;Color&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;background color不设置表示这个view是透明的&lt;/li&gt;
&lt;li&gt;如果再没有进行任何子view的绘制，那么这个view就看不见了&lt;/li&gt;
&lt;li&gt;这种view可以作为容器来使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;iOS 13起，引入黑暗模式后，硬编码的颜色就迎来了很大的问题。&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;纠结的解决方法：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backgroundColor&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;UIColor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;tc&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;userInterfaceStyle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;UIColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;UIColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中, tc是&lt;code&gt;trait collection&lt;/code&gt;，一系列特征的集合。&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;而iOS 13起多了很多&lt;code&gt;.system&lt;/code&gt;开头的color，可以自适应&lt;/li&gt;
&lt;li&gt;&lt;em&gt;asset catalog&lt;/em&gt;中可以自定义颜色，并设置不同模式下的颜色&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Visibility and Opacity&lt;/h2&gt;
&lt;p&gt;隐藏一个view:&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;isHidden&lt;/code&gt;: view还在，但不会接受触摸事件&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alpha = 0&lt;/code&gt;也会使得&lt;code&gt;isHidden == true&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isOpaque&lt;/code&gt;: 它不影响可见性，但影响&lt;strong&gt;drawing system&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;opaque == true&lt;/code&gt;的view不具有透明度，将拥有最高的渲染效率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;frame = CGRect.zero&lt;/code&gt;的view也是不可见的&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Frame, Bounds and Center&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;就是视图在父视图（坐标系）中的位置和大小。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sizeTofit&lt;/code&gt;方法来适应内容的大小。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bound&lt;/code&gt;原点设为(10, 10)意思是坐标系往左上角移了(10,10)的像素，即原来的(10,10)现在到了原点。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bounds.insetBy(dx:dy)&lt;/code&gt;是保持中心不变（即同时改变了原点和宽高）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;center&lt;/code&gt;表示的是视图在父级中的位置，所以改变自己的bounds并不改变它的center&lt;ul&gt;
&lt;li&gt;本质上&lt;code&gt;frame&lt;/code&gt;是center+宽度的便捷方法&lt;/li&gt;
&lt;li&gt;如果v2是v1的子视图，&lt;code&gt;v2.center = v1.center&lt;/code&gt; 通常不能生效，因为它们的坐标系不同（各自的父级）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Transform and Transform3D&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Transform改变View的绘制，但不改变它的bounds和center.&lt;/li&gt;
&lt;li&gt;value is a &lt;code&gt;CGAffineTransform&lt;/code&gt;，其实就是一个变换矩阵&lt;/li&gt;
&lt;li&gt;CGPoint, CGSize, and CGRect all have an &lt;code&gt;applying(_:)&lt;/code&gt; method 用来计算应用Transform后的坐标&lt;/li&gt;
&lt;li&gt;3D版的就是多了一个垂直于屏幕的Z轴&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Window Coordinates and Screen Coordinates&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The device screen has &lt;code&gt;no frame&lt;/code&gt;, but it has bounds.&lt;/li&gt;
&lt;li&gt;The window has &lt;code&gt;no superview&lt;/code&gt;, but its frame is set automatically to match the screen’s bounds.&lt;ul&gt;
&lt;li&gt;continues to fill the screen&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;iOS 7及之前，屏幕的坐标系是不变的，如果有旋转，则是对root view进行了一次rotation的transfrom。
但在iOS 8不再用transform而是制定了两套坐标系，通过&lt;code&gt;UICoordinateSpace&lt;/code&gt;协议表示
    * UIScreen's &lt;code&gt;coordinateSpace&lt;/code&gt;: 会旋转的bounds
    * UIScreen's &lt;code&gt;fixedCoordinateSpace&lt;/code&gt;: 不变&lt;/p&gt;&lt;p&gt;读取视图v在设备的固定坐标系下的位置：&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;screen&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;UIScreen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixedCoordinateSpace&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;r&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;superview&lt;/span&gt;&lt;span class="p"&gt;!.&lt;/span&gt;&lt;span class="n"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Trait Collections&lt;/h2&gt;
&lt;p&gt;将view的一系列环境特征通过view hierarchy层级下传，通过服从&lt;code&gt;UITraitEnvironment&lt;/code&gt;协议（提供&lt;code&gt;traitCollection&lt;/code&gt;属性和&lt;code&gt;traitCollectionDidChange&lt;/code&gt;方法）&lt;/p&gt;&lt;p&gt;&lt;strong&gt;traitCollection&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;&lt;em&gt;displayScale&lt;/em&gt;: screen's resolution&lt;/li&gt;
&lt;li&gt;&lt;em&gt;userInterfaceIdiom&lt;/em&gt;: general device type, iPhone, or ipad&lt;/li&gt;
&lt;li&gt;&lt;em&gt;interfaceStyle&lt;/em&gt;: is in light/dark mode&lt;/li&gt;
&lt;li&gt;&lt;em&gt;userInterfaceLevel&lt;/em&gt;: .base / .elevated -&amp;gt; affects dynamic background colors&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;If you implement traitCollectionDidChange(_: ), &lt;code&gt;always call super in the first line&lt;/code&gt;. Forgetting to do this is a common beginner mistake.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;自定义trait collection只能用下面这种“组合”的方式&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;tcdisp&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;UITraitCollection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;displayScale&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;UIScreen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;tcphone&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;UITraitCollection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userInterfaceIdiom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;tc1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;UITraitCollection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;traitsFrom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tcdisp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tcphone&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  &lt;span class="c1"&gt;// 取交集&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;自动颜色的底层逻辑：&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;yellow&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;UIColor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;systemYellow&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;light&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;UITraitCollection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userInterfaceStyle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;dark&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;UITraitCollection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userInterfaceStyle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;yellowLight&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resolvedColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// 1 0.8 0 1&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;yellowDark&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resolvedColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// 1 0.839216 0.0392157 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Size Classes&lt;/h3&gt;
&lt;p&gt;把屏幕针对宽高和比例做几个分类：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;.regular(h, v) -&amp;gt; iPad&lt;/li&gt;
&lt;li&gt;.compact(h) + .regular(v) -&amp;gt; 竖屏iPhone&lt;/li&gt;
&lt;li&gt;.regular(h) + .compact(v) -&amp;gt; 横屏大iPhone&lt;/li&gt;
&lt;li&gt;.compact(h, v) -&amp;gt; 横屏小iPhone（5S以前的）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以, size class:&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;并不能从&lt;code&gt;traitCollectionDidChange&lt;/code&gt;获得，因为iPad永远是&lt;code&gt;.regular&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;只关心横竖向突然间.regular和.compact的切换&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Overriding Trait Collections&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;You cannot &lt;code&gt;insert&lt;/code&gt; a trait collection directly into the inheritance hierarchy simply by setting a view’s trait collection;&lt;/p&gt;&lt;p&gt;For the user interface style, there is a simpler facility available both for a UIViewController and for a UIView: the &lt;code&gt;overrideUserInterfaceStyle&lt;/code&gt; property. 
    * default &lt;code&gt;.unspecified&lt;/code&gt;，意味着interface style会往下传
    * 一旦设为.dark或.light, 就拦截了&lt;code&gt;userInterfaceStyle&lt;/code&gt;的继承&lt;/p&gt;&lt;h2&gt;Layout&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Manual layout: &lt;code&gt;layoutSubviews&lt;/code&gt;里手动摆放每个视图，可定制最强&lt;/li&gt;
&lt;li&gt;Autoresizing: 子视图根据&lt;code&gt;autoresizingMask&lt;/code&gt;来调整&lt;/li&gt;
&lt;li&gt;Autolayout: 依赖对“约束”的描述来布局，背后仍然是&lt;code&gt;layoutSubviews&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;需要禁止autoresizing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Autoresizing&lt;/h3&gt;
&lt;p&gt;Autoresizing is a matter of conceptually assigning a subview “&lt;strong&gt;springs and struts&lt;/strong&gt;.” A spring can expand and contract; a strut can’t. Springs and struts can be assigned internally or externally, horizontally or vertically.&lt;/p&gt;&lt;p&gt;可变的就叫Spring(有弹性)，不变的就叫Strut（不知道怎么翻译）。&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;一个居中的子视图，本身也会随着父视图而改变大小:&lt;ul&gt;
&lt;li&gt;意味着它与父视图的四个边距是不变的 -&amp;gt; 4个外部决定的struts&lt;/li&gt;
&lt;li&gt;宽高则是可变的 -&amp;gt; 2个内部决定的spring&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;而如果子视图不随环境改变大小：&lt;ul&gt;
&lt;li&gt;意思着宽高是固定的 -&amp;gt; 2个内部决定的struts&lt;/li&gt;
&lt;li&gt;而四个边距通通可变 -&amp;gt; 4个外部决定的spring&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一个右下角摆放的OK button&lt;ul&gt;
&lt;li&gt;显然，按钮大小不改变 -&amp;gt; 2个内部struts&lt;/li&gt;
&lt;li&gt;与右边和底部距离不变 -&amp;gt; 2个外部struts&lt;/li&gt;
&lt;li&gt;与顶部和左边距离可变 -&amp;gt; 2个外部spring&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一个顶部占满的text field&lt;ul&gt;
&lt;li&gt;高度不变 -&amp;gt; 1个vertical struts（内部）&lt;/li&gt;
&lt;li&gt;宽度可变 -&amp;gt; 1个horizontal spring(内部)&lt;/li&gt;
&lt;li&gt;顶，左，右三边距离不变 -&amp;gt; 3个外部struts&lt;/li&gt;
&lt;li&gt;底部距离可变 -&amp;gt; 1个外部spring&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所谓的“内部”，是因为教材里用的是internally，就例子来看，其实就是说衡量的对象只是自己，而“距离”明显需要有一个参照物，那就叫externally了。&lt;/p&gt;&lt;p&gt;通过&lt;code&gt;autoresizingMask&lt;/code&gt;来描述上述例子中的规则，通过bitmask来进行组合，默认为全空（但是等同于&lt;code&gt;flexibleRightMargin&lt;/code&gt;)，即普通的流式布局，靠左上对齐，右边距和底边距是动态的。&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;v1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;UIView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;111&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;132&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;194&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backgroundColor&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;UIColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;v2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;UIView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;132&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;v2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backgroundColor&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;UIColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;v1b&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bounds&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;v3&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;UIView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v1b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v1b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;v3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backgroundColor&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;UIColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addSubview&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addSubview&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addSubview&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;演示了上例中的&amp;quot;text fiels&amp;quot;和“ok button&amp;quot;，一个置顶，一个靠中下。并且都设置了绝对大小的宽高，那么当你改变v1的frame的时候，比如变宽变高，v2,v3会发生什么呢？&lt;/p&gt;&lt;p&gt;因为你没有设置autoresizingMask，那么就会默认保持左上的边距，这样v2不再铺满顶部，v3也不再紧贴右下角，想要它们跟着v1变化：&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;v2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;autoresizingMask&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flexibleWidth&lt;/span&gt;  &lt;span class="c1"&gt;// 宽度可变&lt;/span&gt;
&lt;span class="n"&gt;v3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;autoresizingMask&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[.&lt;/span&gt;&lt;span class="n"&gt;flexibleTopMargin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flexibleLeftMargin&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// 左，顶可变（这样就能尽情往右下贴了）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;AutoResizing在&lt;code&gt;layoutSubviews&lt;/code&gt;被调用之前发生。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3&gt;Autolayout and Constraints&lt;/h3&gt;
&lt;p&gt;autolayout的子view可以不用autolayout，但是父view必须是autolayout，层层向上到&lt;code&gt;main view&lt;/code&gt; of it's view controller, which &lt;em&gt;receives autolayout-related events&lt;/em&gt;&lt;/p&gt;&lt;p&gt;autolayout描述不同view的属性之间的位置关系，这些view不必是兄弟，也不非得是父子，只需要保证拥有一个共同的祖先。&lt;/p&gt;&lt;p&gt;谁持有这些约束？&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;如果是约束自身的宽度（绝对值） -&amp;gt; 属于自身&lt;/li&gt;
&lt;li&gt;如果是约束了它对superview的顶部的距离 -&amp;gt; 属于superview&lt;/li&gt;
&lt;li&gt;如果约束了几个sibling view的顶部对齐 -&amp;gt; 属于这些view的superview&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;事实上，iOS不需要你关心这个，&lt;code&gt;.activate&lt;/code&gt;让你只管描述约束和关系，然后把它加到正确的view上。&lt;/p&gt;&lt;p&gt;约束基本上是可读的，除了&lt;code&gt;priority&lt;/code&gt;, &lt;code&gt;constant&lt;/code&gt;, 和 &lt;code&gt;isActive&lt;/code&gt;，其它情况你只能移除并重建了。（还有一个跟约束无关的&lt;code&gt;identifier&lt;/code&gt;， debug有用）&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;autolayout发生在&lt;code&gt;layoutSubviews&lt;/code&gt;，所以如果你提前设置了frame，图像将会发生跳动。如果你是在layoutSubviews里面设置的就不会。当然你最好线用约束。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;如果你的约束涉及到了别的之前并没用使用autolayout的view， The autolayout engine takes care of this for you:&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;it &lt;code&gt;reads&lt;/code&gt; the view’s &lt;em&gt;frame&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;and &lt;em&gt;autoresizingMask&lt;/em&gt; settings and &lt;code&gt;translates&lt;/code&gt; them into implicit constraints&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如：&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;lab1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;UILabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CGRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;270&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;lab1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;autoresizingMask&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[.&lt;/span&gt;&lt;span class="n"&gt;flexibleLeftMargin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flexibleBottomMargin&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;lab1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;
&lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addSubview&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lab1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一个右上的label，如果你的另一个view相对&lt;em&gt;lab1&lt;/em&gt;来设置autolayout的约束，那么lab1将会自动产生如下四个约束：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. &amp;lt;NSAutoresizingMaskLayoutConstraint H:[UILabel:'Hello']-(63)-|&amp;gt;
2. &amp;lt;NSAutoresizingMaskLayoutConstraint UILabel:'Hello'.minY == 20&amp;gt;
3. &amp;lt;NSAutoresizingMaskLayoutConstraint UILabel:'Hello'.width == 42&amp;gt;
4. &amp;lt;NSAutoresizingMaskLayoutConstraint UILabel:'Hello'.height == 22&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;而且约束的具体数值以当前运行设备来定的，比如上例是iPhone8，屏幕宽度是375，那么：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;origin(270, 28) 能得到minY = 20 -&amp;gt; 约束2&lt;/li&gt;
&lt;li&gt;size(42, 22)能得到height = 22, width = 42 -&amp;gt; 约束3，4&lt;/li&gt;
&lt;li&gt;结合屏幕宽度，origin, size， 得到右边距离：(375 - 270 - 42 = 63) -&amp;gt; 约束1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是如果后面还有别的约束的话，很容易千万冲突，毕竟都自动生成的，用户写代码的时候并不会在意当时自动生成的约束在其它场景是否也会有别的约束自动生成&lt;/p&gt;&lt;p&gt;&lt;code&gt;translatesAutoresizingMaskIntoConstraints&lt;/code&gt;干的就是这个，所以一般情况下是把它关掉的。&lt;/p&gt;&lt;p&gt;语法：&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addConstraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="bp"&gt;NSLayoutConstraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;v2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;relatedBy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="bp"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;toItem&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;multiplier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;// compact notation&lt;/span&gt;
&lt;span class="bp"&gt;NSLayoutConstraint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="n"&gt;lab2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;topAnchor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;equalTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;lab1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bottomAnchor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;lab2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trailingAnchor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;equalTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trailingAnchor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;VFL (Visual format notation)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;V:|-10-[v2(20)]&amp;quot;&lt;/code&gt;这代表v2的顶部距离superview 10个point,高度是20。如果描述的是水平方向的，则是&lt;strong&gt;H&lt;/strong&gt;，但H是默认的，可以省略。同样，H对应的括号里的数值会被理解为width.&lt;/p&gt;&lt;p&gt;v2是view的名字，通常你需要准备一个字典，这样就可以在&lt;code&gt;VFL&lt;/code&gt;中用简单的文字对应任何view了&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;d&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;v2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;v2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;v3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;v3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="bp"&gt;NSLayoutConstraint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="bp"&gt;NSLayoutConstraint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constraints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;withVisualFormat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;H:|[v2]|&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="bp"&gt;NSLayoutConstraint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constraints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;withVisualFormat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;V:|[v2(10)]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="bp"&gt;NSLayoutConstraint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constraints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;withVisualFormat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;H:[v3(20)]|&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="bp"&gt;NSLayoutConstraint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constraints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;withVisualFormat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;V:[v3(20)]|&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;flatMap&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意这里的flatMap，因为&lt;code&gt;constraints(withVisualFormat:)&lt;/code&gt; 返的是一个数组，而期望是一个值，所以用map把$0取了出来。&lt;/p&gt;&lt;p&gt;&lt;code&gt;&amp;quot;[v1(&amp;gt;=20@400,&amp;lt;=30)]&amp;quot;&lt;/code&gt;，@后面接的是优先级&lt;/p&gt;&lt;h3&gt;new features&lt;/h3&gt;
&lt;p&gt;iOS 10引入的&lt;code&gt;anchorWithOffset(to:)&lt;/code&gt;，是什么意思？&lt;/p&gt;&lt;p&gt;它也是创建的一个anchor，也就是说可以应用&lt;code&gt;constrain(equalto:)&lt;/code&gt;之类的方法，而它本身是一个dimension，所以dimension当然是可以用来比较的。&lt;/p&gt;&lt;p&gt;比如，我有一个view(v1)，摆在屏幕上面某位置，现在要摆一个view(v2)，希望它出现在v1和屏幕底部（或v1的superview，设为v0）的中间（即垂直居中），显然，如果要用dimension描述出来的话，那就是：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;v1底部到v2中间的距离&lt;/li&gt;
&lt;li&gt;等于&lt;/li&gt;
&lt;li&gt;v2中部到屏幕底部v0底部的距离&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="bp"&gt;NSLayoutConstraint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bottomAnchor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;anchorWithOffset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;v2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;centerYAnchor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;equalTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;v2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;centerYAnchor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;anchorWithOffset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bottomAnchor&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;刻意写成了三行，与我上文的三段文字描述对应&lt;/p&gt;&lt;p&gt;iOS 11引入了运行时决定的spacing：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;constraint(equalToSystemSpacingAfter:multiplier:)
constraint(greaterThanOrEqualToSystemSpacingAfter:multiplier:)
constraint(lessThanOrEqualToSystemSpacingAfter:multiplier:)
constraint(equalToSystemSpacingBelow:multiplier:)
constraint(greaterThanOrEqualToSystemSpacingBelow:multiplier:)
constraint(lessThanOrEqualToSystemSpacingBelow:multiplier:)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Margins and Guides&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;UIEdgeInsets是对布局的补充，增加“第二条边”&lt;/li&gt;
&lt;li&gt;Layout guides -&amp;gt; 没看明白&lt;/li&gt;
&lt;li&gt;safe area可以表示为inset，也可以表示为guides&lt;ul&gt;
&lt;li&gt;&lt;code&gt;additionalSafeAreaInsets&lt;/code&gt;还能增加safe area&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;topAnchor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;equalTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;safeAreaLayoutGuide&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;topAnchor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;subview might be positioned with respect to its superview’s &lt;code&gt;margins&lt;/code&gt;, especially through an autolayout constraint. By &lt;strong&gt;default&lt;/strong&gt;, a view has a margin of 8 on all four edges.
这更像是superview的padding，而iOS并没有padding的概念（因为它并不是CSS的盒子模型）&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leadingAnchor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;equalTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layoutMarginsGuide&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leadingAnchor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;arr&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;NSLayoutConstraint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constraints&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;withVisualFormat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;H:|-[v]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;v&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;layoutMarginsGuide&lt;/code&gt;是只读的，但UIView提供了&lt;code&gt;layoutMargins&lt;/code&gt;属性（一个UIEdgeInsets）&lt;ul&gt;
&lt;li&gt;from iOS11: &lt;code&gt;directionalLayoutMargins&lt;/code&gt;(其实就是用了trail, leading等)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;VFL中用短横线来代表对齐的是margin&lt;/li&gt;
&lt;li&gt;margin会往下传，用&lt;code&gt;preservesSuperviewLayoutMargins&lt;/code&gt;控制&lt;/li&gt;
&lt;li&gt;margin与safearea不冲突，会自动相加，用&lt;code&gt;insetsLayoutMarginsFromSafeArea&lt;/code&gt;关闭&lt;/li&gt;
&lt;li&gt;viewController有&lt;code&gt;systemMinimumLayoutMargins&lt;/code&gt;可以增加main view的margin(减小的话会静默失败，即无效)&lt;ul&gt;
&lt;li&gt;而&lt;code&gt;viewRespectsSystemMinimumLayoutMargins&lt;/code&gt;设为false，就能突破这个限制：（上下为0，左右为16，大屏设备左右为20）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Custom layout guides&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;书中的例子是垂直平均分配几个view，然后发现是把layout guide当成一个view来做的&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;每个view（除去最后一个） add一个guide&lt;/li&gt;
&lt;li&gt;ABABABA排列，A是view,B是guide&lt;/li&gt;
&lt;li&gt;A的底部=B的顶部（除去最后一个A）&lt;/li&gt;
&lt;li&gt;A的顶部=B的底部（除去第一个A）&lt;/li&gt;
&lt;li&gt;令B的高度相等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;就把4个A给垂直平均分配了，理解的难点就是guide也当作一个view来用，而语法上又是加到view的属性里的。同时，只要设置guide的高度相等，就会自动占用4个View之外的所有空间平均分配。
&lt;figure style="flex: 78.66449511400651" &gt;&lt;img loading="lazy" width="966" height="614" src="https://cdn.jsdelivr.net/gh/wzywalker/wzywalker.github.io@main/archives/assets/2629afe5515d8fa7df75f83b138083fa.png" /&gt;&lt;/figure&gt;&lt;/p&gt;&lt;p&gt;这么做只是为了演示layout guide，但是虽然理解了，也不知道能用它来干嘛？当成一个隐形的view去做布局？&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Constraint alignment&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;通过设置view的&lt;code&gt;alignmentRectInsets&lt;/code&gt;，可以改变constrains计算的起点。对我来说，又是一种padding?&lt;/p&gt;&lt;p&gt;同样的还有自定义baseline的&lt;code&gt;forFirstBaselineLayout and forLastBaselineLayout.&lt;/code&gt;&lt;/p&gt;&lt;h3&gt;Intrinsic Content Size&lt;/h3&gt;
&lt;p&gt;button, label, image等会根据内容和预设有一个instrinsic content size，而且可以用来&lt;strong&gt;隐式地&lt;/strong&gt;产生约束（&lt;code&gt;NSContentSizeLayoutConstraint&lt;/code&gt;）&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;contentHuggingPriority(for:)&lt;/code&gt; 某方向上阻止扩大到比intrinsic size更大的优先级，默认250&lt;/li&gt;
&lt;li&gt;&lt;code&gt;contentCompressionResistancePriority(for:)&lt;/code&gt;，阻止缩小的优先级，默认750&lt;/li&gt;
&lt;li&gt;&lt;code&gt;invalidateIntrinsicContentSize&lt;/code&gt;就像invalidate a view，会触发重新计算size&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;H:[lab1(&amp;gt;=100)]-(&amp;gt;=20)-[lab2(&amp;gt;=100)]&amp;quot;&lt;/code&gt; 这两个label，在屏幕变小时，谁最先缩到100？&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;p&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lab2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contentCompressionResistancePriority&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;horizontal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;lab1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setContentCompressionResistancePriority&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;horizontal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里把lab1阻止缩小的优先级调得更高，那么就是lab2会先缩小&lt;/p&gt;&lt;h3&gt;Self-Sizing Views&lt;/h3&gt;
&lt;p&gt;前面讲的都是superview对subview的影响，这一节反过来，subview的大小影响superview。&lt;/p&gt;&lt;p&gt;假定一个没有设置宽高的view，包含了一个button，我们知道button是有其intrinsic size的（固定的高，宽度由按钮文字决定），&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;所以这个view也就有了宽高。&lt;/li&gt;
&lt;li&gt;但这个宽高拥有低优先级，不会与显式设定的宽高相冲突。&lt;/li&gt;
&lt;li&gt;运行时调用&lt;code&gt;systemLayoutSizeFitting(_:)&lt;/code&gt;可以让系统优优先级地去按这个size去layout。这个操作是昂贵和低效的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Stack Views&lt;/h3&gt;
&lt;p&gt;UIStackView仍然是自动布局体系里的，它的作用是（为其&lt;code&gt;arrangedSubviews&lt;/code&gt;）生成一系列约束，可以理解为语法糖。&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;arrangedSubviews&lt;/code&gt;是&lt;strong&gt;subViews&lt;/strong&gt;的一个子集&lt;/li&gt;
&lt;li&gt;stackView也可以添加额外的subView&lt;/li&gt;
&lt;li&gt;&lt;em&gt;setCustomSpacing(_:after:)&lt;/em&gt;设置额外的space&lt;/li&gt;
&lt;li&gt;不要再对arrangedSubviews手动添加约束，基本会与你看不见的计算出来的约束冲突&lt;ul&gt;
&lt;li&gt;但stackview本身是可以用autolayout来布局的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此时再来看看前面的竖向排列元素，并且间隔相等的例子的写法：&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// give the stack view arranged subviews&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;sv&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;UIStackView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arrangedSubviews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// configure the stack view&lt;/span&gt;
&lt;span class="n"&gt;sv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vertical&lt;/span&gt;
&lt;span class="n"&gt;sv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;alignment&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fill&lt;/span&gt;
&lt;span class="n"&gt;sv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;distribution&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;equalSpacing&lt;/span&gt;
&lt;span class="c1"&gt;// constrain the stack view&lt;/span&gt;
&lt;span class="n"&gt;sv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;translatesAutoresizingMaskIntoConstraints&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addSubview&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;marg&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layoutMarginsGuide&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;safe&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;safeAreaLayoutGuide&lt;/span&gt;
&lt;span class="bp"&gt;NSLayoutConstraint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="n"&gt;sv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;topAnchor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;equalTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;safe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;topAnchor&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;sv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leadingAnchor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;equalTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;marg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leadingAnchor&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;sv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trailingAnchor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;equalTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;marg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trailingAnchor&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;sv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bottomAnchor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;equalTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bottomAnchor&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;顺便注意以下里对layoutMargin和safearea的引用，都是通过layout guide的。&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;debug会发现stack view其实帮你做了你之前做的事：&lt;code&gt;generating UILayoutGuide objects and using them as spacers&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;stack view还有一个特性就是能自适应&lt;code&gt;arrangedSubviews&lt;/code&gt;的变化。如果你把它理解为一个计算引擎，可能就好理解了。&lt;/p&gt;&lt;h3&gt;Internationalization&lt;/h3&gt;
&lt;p&gt;使用.leading, .trailing等是为了适应不同语言的左右顺序，引入到布局里却会出现问题，并不是从右到左的语言的横向布局就也要相应反转。UIView.semanticContentAttribute可以人为控制，&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;默认值是.unspecified，&lt;/li&gt;
&lt;li&gt;.playback or .spatial将会不应用翻转。&lt;/li&gt;
&lt;li&gt;.forceLeftToRight or .forceRightToLeft则是手动指定一个方向&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;UIView&lt;code&gt;.effectiveUserInterfaceLayoutDirection&lt;/code&gt;能report出这个trait&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;You can test your app’s right-to-left behavior easily by changing the scheme’s Run option Application Language to “Right to Left Pseudolanguage.”&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3&gt;Debug autolayout&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;(lldb) e -l objc -- [[UIApplication sharedApplication] windows][0]
(UIWindow *) $1 = ...
(lldb) e -l objc -O -- [$1 _autolayoutTrace]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To get a full list of the constraints responsible for positioning a particular view within its superview, log the results of calling the UIView instance method &lt;code&gt;constraintsAffectingLayout(for:)&lt;/code&gt;.&lt;/p&gt;&lt;h2&gt;Configuring Layout in Nib&lt;/h2&gt;
&lt;p&gt;这一部分内容建议打开Xcode对着原文操作，多为界面操作&lt;/p&gt;&lt;h3&gt;Conditional Interface Design&lt;/h3&gt;
&lt;p&gt;wC, HR等用来表示宽高在正常和压缩空间里的不同组合。&lt;/p&gt;&lt;p&gt;思路：先架构通用的视图和约束，然后用两种方法之一来描述不同size class下的特殊布局：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;in the Attributes or Size inspector&lt;/li&gt;
&lt;li&gt;design that difference in the canvas:&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Xcode View Features&lt;/h2&gt;
&lt;h3&gt;Designable Views and Inspectable Properties&lt;/h3&gt;
&lt;p&gt;有关Xcode的预览这一节可以看看，以及&lt;code&gt;@IBDesignable&lt;/code&gt;方法能在xib里面呈现（教程里是在&lt;code&gt;willMove(toSuperview)&lt;/code&gt;方法里调用）&lt;/p&gt;&lt;h2&gt;Layout Events&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;updateConstraints&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;（向上冒泡）&lt;code&gt;propagated up&lt;/code&gt; the hierarchy, starting at the deepest subview&lt;/li&gt;
&lt;li&gt;called at launch time，然后几乎不会调用，除非手动&lt;/li&gt;
&lt;li&gt;也从不直接调用，而是通过&lt;ul&gt;
&lt;li&gt;&lt;code&gt;updateConstraintsIfNeeded&lt;/code&gt;方法&lt;/li&gt;
&lt;li&gt;或是&lt;code&gt;setNeedsUpdateConstraints&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;traitCollectionDidChange(_:)&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;(向下传播)&lt;code&gt;propagated down&lt;/code&gt; the hierarchy of UITraitEnvironments.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;layoutSubviews&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;The layoutSubviews message is the moment when &lt;code&gt;layout actually takes place&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;（向下传播） &lt;code&gt;propagated down&lt;/code&gt; the hierarchy, starting at the top (typically the root view) and working down to the deepest subview.&lt;/li&gt;
&lt;li&gt;If you’re not using autolayout, layoutSubviews does &lt;strong&gt;nothing&lt;/strong&gt; by default&lt;/li&gt;
&lt;li&gt;layoutSubviews is your opportunity to perform manual layout &lt;strong&gt;after&lt;/strong&gt; autoresizing has taken place.&lt;/li&gt;
&lt;li&gt;If you are using autolayout, you &lt;strong&gt;must&lt;/strong&gt; call super or the app will crash (with a helpful error message).&lt;/li&gt;
&lt;li&gt;从不直接调用：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;layoutIfNeeded&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setNeedsLayout&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;When you’re using autolayout, &lt;code&gt;what happens in layoutSubviews&lt;/code&gt;?&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;The runtime, having examined and resolved all the constraints affecting this view’s subviews,&lt;/li&gt;
&lt;li&gt;and having worked out values for their center and bounds,&lt;/li&gt;
&lt;li&gt;now simply assigns &lt;code&gt;center&lt;/code&gt; and &lt;code&gt;bounds&lt;/code&gt; values to them.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In other words, layoutSubviews performs &lt;strong&gt;manual layout&lt;/strong&gt;!&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;所以如果你需要在auto layout之后微调，&lt;code&gt;layoutSubviews&lt;/code&gt;是法定的入口：&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;call &lt;code&gt;super&lt;/code&gt;, causing all the subviews to adopt their new frames&lt;/li&gt;
&lt;li&gt;examine those frames, 如果不满意，则对&lt;code&gt;frame&lt;/code&gt;进行微调（或者&lt;code&gt;bounds&lt;/code&gt;和&lt;code&gt;center&lt;/code&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这也是autolayout engine自己的步骤，要注意的是你必须要和autolayout engine来协作，并且&lt;strong&gt;不要&lt;/strong&gt;调用&lt;code&gt;setNeedsUpdateConstraints&lt;/code&gt;(时机已过)&lt;/p&gt;</description><author>hi@imalan.cn (walker)</author><guid isPermaLink="true">/archives/View/</guid><pubDate>Wed, 22 Dec 2021 00:00:00 +0806</pubDate></item><item><title>翻转二叉树</title><link>/archives/%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/</link><description>&lt;p&gt;最近在找工作，所以这些算法梗又出现在了我的阅读视野里，比如经典的homebrew作者吐槽的翻转二叉树的问题。
&lt;figure style="flex: 86.71052631578948" &gt;&lt;img loading="lazy" width="659" height="380" src="https://cdn.jsdelivr.net/gh/wzywalker/wzywalker.github.io@main/archives/assets/4b282d39e440d597c619d781ee3b690e.png" /&gt;&lt;/figure&gt;&lt;/p&gt;&lt;p&gt;我本以为是根和叶节点倒转过来，原来是同层里面的左右翻转。&lt;/p&gt;&lt;p&gt;那么就是把左边换到右边，右边换到左边呗，可以考虑递归。我一直用一个原则理解递归，就是把命令传达下去（比如上面的左右互换，就完了），而不关心细节，只有最末端的那个大头兵才是真正做业务的人，写了一下，递归加业务也就4行代码：&lt;/p&gt;&lt;figure style="flex: 80.10335917312662" &gt;&lt;img loading="lazy" width="1240" height="774" src="https://cdn.jsdelivr.net/gh/wzywalker/wzywalker.github.io@main/archives/assets/8defc3430ca00b8a8501fb6d8356c6fb.png" /&gt;&lt;/figure&gt;&lt;p&gt;具体到这个问题，就是我把left和right互换就是了
然后left和right你们做好自己的子级的互换，我不管，所以核心代码就一句
&lt;code&gt;left, right = right, left&lt;/code&gt;，前面是为了稳妥，通过了之后，直接用python这种左右互换的特性，那就真是一句代码了：&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;invertTree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
    &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;invertTree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;invertTree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description><author>hi@imalan.cn (walker)</author><guid isPermaLink="true">/archives/%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/</guid><pubDate>Fri, 14 Jan 2022 00:00:00 +0806</pubDate></item><item><title>《Effective-Objective-C-2-0》笔记第1-2章</title><link>/archives/%E3%80%8AEffective-Objective-C-2-0%E3%80%8B%E7%AC%94%E8%AE%B0%E7%AC%AC1-2%E7%AB%A0/</link><description>&lt;figure style="flex: 38.0" &gt;&lt;img loading="lazy" width="912" height="1200" src="https://cdn.jsdelivr.net/gh/wzywalker/wzywalker.github.io@main/archives/assets/ac920d0dab7ba40befbff58ed826b587.png" /&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;这个书当然中文版的，也很经典，我也读过了，但是嘛，老规矩，有原版还是读一遍原版，再加上英文水平也只有那么好，有机会能多读读在就多读读吧。一共就7章，52节，200多页，并不多。
此外，因为很多名词其实我们平时直接叫的就是英文，中文版里统统都给了一个中文翻译，反而更陌生了，有种“访达”的即视感。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h1&gt;Chapter 1: Accustoming Yourself to Objective-C&lt;/h1&gt;
&lt;h2&gt;Item 1: Familiarize Yourself with Objective-C’s Roots&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;messaging structure&lt;/code&gt; v.s. &lt;code&gt;function callihng&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;in messaging structure, the &lt;strong&gt;runtime&lt;/strong&gt; decides which code gets executed, while in function, the  &lt;strong&gt;compiler&lt;/strong&gt; decides.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dynamic binding&lt;/code&gt; v.s. &lt;code&gt;virtual table&lt;/code&gt;  &amp;lt;= 多态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;runtime component&lt;/code&gt; v.s. &lt;code&gt;compiler&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;含有所有让面向对象的OC能工作的 &lt;em&gt;data structures&lt;/em&gt; and &lt;em&gt;functions&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;比如，含有所有的memory-management methods&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;更新runtime component就能提升性能，而无需重新编译&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Objective-C is a superset of C&lt;ul&gt;
&lt;li&gt;所以语法基本类似：&lt;code&gt;NSString *str = @&amp;quot;The String&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;表示声明了一个变量，类型是&lt;em&gt;NSString *&lt;/em&gt;，是一个指向NSString的指针&lt;/li&gt;
&lt;li&gt;所有OC对象必须如此声明，对象内存也总是分配在heap space上&lt;ul&gt;
&lt;li&gt;这是分配到stack上：&lt;code&gt;NSString stackString&lt;/code&gt; &amp;lt;- 报错&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但指向这个对象的指针（&lt;strong&gt;pointer&lt;/strong&gt;）是分配在&lt;code&gt;stack frame&lt;/code&gt;里的，多个指向同一对象的指针就分配了多个内存&lt;ul&gt;
&lt;li&gt;每个内存大小就是一枚指针的大小&lt;/li&gt;
&lt;li&gt;值也是一样&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The memory allocated in the &lt;code&gt;heap&lt;/code&gt; has to be &lt;strong&gt;managed directly&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;OC将堆内存管理抽象了出来，&lt;code&gt;runtime&lt;/code&gt;进一步抽象成一套内存管理架构：&lt;code&gt;reference counting&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;整个系统框架都要使用结构体，用对象会有额外的开销&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Item 2: Minimize Importing Headers in Headers&lt;/h2&gt;
&lt;p&gt;Objective-C, just like C and C++, makes use of &lt;code&gt;header files&lt;/code&gt; and implementation files.&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;forward declaring&lt;/code&gt; -&amp;gt; &lt;code&gt;@class SomeClass&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;头文件里并不知道知道一些类的实现细节，只需要知道有这么一个类就行了&lt;/li&gt;
&lt;li&gt;但是&lt;code&gt;.m&lt;/code&gt;文件里就要自行去import一次这个class了&lt;/li&gt;
&lt;li&gt;原则就是尽量延后引入头文件的时机，减少编译时间&lt;/li&gt;
&lt;li&gt;还解决了互相引用的问题&lt;/li&gt;
&lt;li&gt;引用&lt;code&gt;super class&lt;/code&gt;, &lt;code&gt;protocol&lt;/code&gt;等必须要知道细节，不能应用&lt;code&gt;forward declaring&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;所以最好把protocol单独放在一个头文件，避免无谓地引用大文件，增加编译时间&lt;/li&gt;
&lt;li&gt;但是&lt;code&gt;delegate&lt;/code&gt;放到&lt;code&gt;class-continuation category&lt;/code&gt;里面写更好（即在&lt;strong&gt;.m&lt;/strong&gt;文件里写protocol和import），无需暴露到公共头文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;关键词：&lt;code&gt;减小依赖&lt;/code&gt;，&lt;code&gt;缩减编译时间&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Item 3: Prefer Literal Syntax over the Equivalent Methods&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;尽量使用字面量语法（&lt;code&gt;Literal Syntax&lt;/code&gt;）创建和使用对象&lt;/li&gt;
&lt;li&gt;字面量语法只是一个语法糖（&lt;code&gt;syntactic sugar&lt;/code&gt;），推荐使用字面量，会减少代码量，但最好知道它对应的原始方法。（但是还是会有所区别，看下例）&lt;/li&gt;
&lt;li&gt;用字面量初始数组，如果不是最后一个元素是nil，会报错，而原始的&lt;code&gt;arrayWithObjects:&lt;/code&gt;方法则会在碰到第一个nil时当成是终止参数而正常执行（只保留nil前的元素初始化数组）&lt;ul&gt;
&lt;li&gt;作者说这反而是好事，未预料到的情况成功执行比报错更可怕，抛异常能更早地发现错误&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;只能创建Foundation框架的对象，自定义对象不行（一般也没必要）&lt;/li&gt;
&lt;li&gt;使用字面量语法创建出来的String, Array, Dict等都&lt;code&gt;immutable&lt;/code&gt;的&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Item 4: Prefer Typed Constants to Preprocessor #define&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#define&lt;/code&gt;本质是替换&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#define&lt;/code&gt;出来的是没有类型信息的&lt;/li&gt;
&lt;li&gt;如果是声明在头文件中，引用了此头文件的代码都会应用此替换&lt;ul&gt;
&lt;li&gt;即使被重定义了，编译器也不会产生警告&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;而常量就带了类型信息&lt;ul&gt;
&lt;li&gt;&lt;code&gt;static NSString * const MyStringConstants = &amp;quot;Hello world;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;注意星号的位置，这里表示指针指向的是整个常量&lt;/li&gt;
&lt;li&gt;如果把星号写到const后，那表示指针就是那个常量...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;定义常量的位置很重要（预处理指令也一样），不打算公开的话就在&lt;code&gt;.m&lt;/code&gt;文件里定义&lt;/li&gt;
&lt;li&gt;命令也很重要&lt;/li&gt;
&lt;li&gt;否则成了全局变量，很可能”不经意“引起变量冲突/覆盖&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static const&lt;/code&gt;要一起使用，单独的&lt;code&gt;const&lt;/code&gt;会报错&lt;ul&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt;不再是别的语言中的&lt;strong&gt;静态变量&lt;/strong&gt;，而保是一个作用域声明&lt;/li&gt;
&lt;li&gt;一个编译单元（&lt;code&gt;translation unit&lt;/code&gt;）个输出一个目标文件（&lt;code&gt;object file&lt;/code&gt;）&lt;ul&gt;
&lt;li&gt;考虑你编译一个c++文件，一个文件生成一个目标（二进制）文件，然后再链接。&lt;/li&gt;
&lt;li&gt;所以一个编译单元一般是一个&lt;code&gt;.m&lt;/code&gt;文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;结合起来，&lt;code&gt;static&lt;/code&gt;就是在一个目标文件内可见&lt;/li&gt;
&lt;li&gt;如果不加&lt;code&gt;static&lt;/code&gt;，编译器会添加一个&lt;code&gt;external symbol&lt;/code&gt;（后面有详述），这样就有重定义风险了（&lt;code&gt;duplicate symbol&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最后，事实上&lt;code&gt;static const&lt;/code&gt;一起用，编译器做的仍然是&lt;strong&gt;替换&lt;/strong&gt;，而没有去创建符号（但此时已经有类型信息了）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;*如果需要公开，则添加到全局符号表（&lt;code&gt;global symbol table&lt;/code&gt;）中：&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// In the header file&lt;/span&gt;
&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;NSString&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EOCStringConstant&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// In the implementation file&lt;/span&gt;
&lt;span class="bp"&gt;NSString&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EOCStringConstant&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;VALUE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;上面解释了&lt;code&gt;static&lt;/code&gt;，现在来解释&lt;code&gt;extern&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;extern&lt;/code&gt;表示向编译器保证全局符号表中将会有这个符号，其实就是要编译器不要继续检查&lt;/li&gt;
&lt;li&gt;它知道链接成二进制文件后，肯定能找到这个常量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;所以在&lt;code&gt;.m&lt;/code&gt;文件里正常定义和赋值，在&lt;strong&gt;任意&lt;/strong&gt;&lt;code&gt;.h&lt;/code&gt;文件时给编译器打个招呼就行了&lt;/li&gt;
&lt;li&gt;命名规范：&lt;ul&gt;
&lt;li&gt;如果是限定可见域的，用&lt;code&gt;k&lt;/code&gt;开头就行了&lt;/li&gt;
&lt;li&gt;如果会公开的，那么就用函数名作前缀（系统框架都是这么做的）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;external symbol&lt;/strong&gt; V.S. &lt;strong&gt;global symbol&lt;/strong&gt;&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;前文你已经知道了两种提升作用域的方式，区别在&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;一个是通过不对const加static（添加external symbol），&lt;/li&gt;
&lt;li&gt;一个是额外声明extern（添加到blobal symbol talbe）&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Item 5: Use Enumerations for States, Options, and Status Codes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;枚举只是一种常量命名方式&lt;/li&gt;
&lt;li&gt;语法很奇葩：&lt;code&gt;enum EOCConnectionState&lt;/code&gt; state = EOCConnectionStateDisconnected;&lt;ul&gt;
&lt;li&gt;看高亮的部分，别人只要写一个type，它要连enum带名称写全&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;所以一般会&lt;code&gt;typedef&lt;/code&gt;一下：&lt;code&gt;typedef enum EOCConnectionState EOCConnectionState;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;现在就可以用&lt;code&gt;EOCConnectionState&lt;/code&gt;这个type来定义变量了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用enum来做选项(options)的时候，因为不是互斥的关系，选择bitwise OR operator来会直观很多（就是每一个二进制位代表一个状态）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;enum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;UIViewAutoresizing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;UIViewAutoresizingNone&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;UIViewAutoresizingFlexibleLeftMargin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;UIViewAutoresizingFlexibleWidth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;UIViewAutoresizingFlexibleRightMargin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;UIViewAutoresizingFlexibleTopMargin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;UIViewAutoresizingFlexibleHeight&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;UIViewAutoresizingFlexibleBottomMargin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;figure style="flex: 66.52173913043478" &gt;&lt;img loading="lazy" width="918" height="690" src="https://cdn.jsdelivr.net/gh/wzywalker/wzywalker.github.io@main/archives/assets/4a634eedbb41d909a0b262a8f2f437ee.png" /&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;Foundation框架定义了一些辅助宏，以便支持新的C++标准对宏定义的增强同时还能兼容老的标准: &lt;code&gt;NS_ENUM&lt;/code&gt;和&lt;code&gt;NS_OPTIONS&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;特别是c++对枚举值里的bitwise操作结果需要显式转换&lt;/li&gt;
&lt;li&gt;所以用到了&lt;strong&gt;可组合&lt;/strong&gt;的option类的枚举，最好用&lt;code&gt;NS_OPTIONS&lt;/code&gt;宏，否则用&lt;code&gt;NS_ENUM&lt;/code&gt;就够了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对enum应用&lt;code&gt;switch&lt;/code&gt;最好不要加&lt;code&gt;default&lt;/code&gt;，这样你添加了新的枚举值而忘记了处理，能及时得到错误反馈&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Chapter 2: Objects, Messaging, and the Runtime&lt;/h1&gt;
&lt;h2&gt;Item 6: Understand Properties&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Properties&lt;/code&gt; are an Objective-C feature providing encapsulation of the data an object contains.&lt;ul&gt;
&lt;li&gt;stored by &lt;code&gt;instance variables&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;accessed through &lt;code&gt;accessor methods&lt;/code&gt; (getter, setter)&lt;ul&gt;
&lt;li&gt;can be written by complier automatically &amp;lt;= &lt;code&gt;autosynthesis&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;introduced a &lt;code&gt;dot syntax&lt;/code&gt; to  accessing the data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看一下C++写法：&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;interface&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EOCPerson&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NSObject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;_firstName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;_lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;NSString&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;_someInternalData&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;对象布局在编译期就确定了，所以就硬编码了每个属性在对象内存中的偏移量&lt;/li&gt;
&lt;li&gt;所以如果对象布局变化了（比如增加了实例变量），这些偏移量就会出错，必须要重新编译。&lt;ul&gt;
&lt;li&gt;如果链接代码时使用了不同版本的类定义，就会产生这种“不兼容”的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OC的解决方案是，把偏移量仍由“实例变量”存储&lt;ul&gt;
&lt;li&gt;但是交由“类对象“(class object)保管&lt;/li&gt;
&lt;li&gt;偏移量在运行期查找 -&amp;gt; 类的定义变了，偏移量也就变了（实时的）&lt;ul&gt;
&lt;li&gt;甚至可以在运行期向类中新增实例变量&lt;/li&gt;
&lt;li&gt;nonfragile Application Binary Interface(ABI)&lt;/li&gt;
&lt;li&gt;这样就可以不止在声明文件里定义实例变量，还可以在class-continuation和实现文件里面定义了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;尽量不要直接访问实例变量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;点语法&lt;/code&gt;访问属性&lt;ul&gt;
&lt;li&gt;编译器会转换为对存取方法的调用&lt;/li&gt;
&lt;li&gt;编译器会为属性生成相应的实例变量，并自动合成（生成相应的存取方法）&lt;ul&gt;
&lt;li&gt;编译期进行，所以你看不到实际的代码&lt;/li&gt;
&lt;li&gt;也可以手写同样的代码（这时你就可以自定义实例方法的签名了）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@dynamic&lt;/code&gt;能阻止合成 &amp;lt;= 相信运行期能找到&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Property Attributes&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;原子性(&lt;code&gt;Atomicity&lt;/code&gt;)，读写的时候加锁&lt;/li&gt;
&lt;li&gt;读/写权限&lt;/li&gt;
&lt;li&gt;内存管理语义&lt;ul&gt;
&lt;li&gt;assign: on scalar type&lt;/li&gt;
&lt;li&gt;strong: 拥有关系，设置新值流程：retain new -&amp;gt; release old -&amp;gt; set new&lt;/li&gt;
&lt;li&gt;weak: 非拥有关系&lt;/li&gt;
&lt;li&gt;unsafe_unretained: 类似assign，但适用于对象类型（而不只有scalar type)&lt;ul&gt;
&lt;li&gt;与weak的区别在目标对象在销毁时，该属性值不会自动清空&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;copy: 类似strong，但是相比起retain，它直接是复制了一份，通常用于拥有可变类型的变量，比如&lt;code&gt;NSString *&lt;/code&gt;，可变版的string也能赋值给NSString，这就会引起赋值后值还自己变了的可能性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;方法名&lt;ul&gt;
&lt;li&gt;getter=&lt;name&gt;，需要注意的是有些bool类型的通常会设置为&lt;code&gt;isXXXX&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;setter=&lt;name&gt;，但很少这么做&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果自己来实现accessor methods，那么就要自己去保证这些方法符合这些attributes，比如内存管理语义为copy，那么在设置的时候就要拷贝传入的值：&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="nc"&gt;EOCPerson&lt;/span&gt; : &lt;span class="bp"&gt;NSManagedObject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="k"&gt;@property&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;NSString&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;@property&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;NSString&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;initWithFirstName:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSString&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;firstName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;lastName:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSString&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;@end&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// 实现文件：&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;initWithFirstName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSString&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;firstName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lastName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSString&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;lastName&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;_firstName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;firstName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;_lastName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lastName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;读写操作的原子性并不是线程安全&lt;/li&gt;
&lt;li&gt;iOS中使用同步锁开销较大&lt;/li&gt;
&lt;li&gt;实际iOS程序碰到多线程读写属性的场景也非常少&lt;/li&gt;
&lt;li&gt;所以基本上都是声明为&lt;code&gt;nonatomic&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Item 7: Access Instance Variables Primarily Directly When Accessing Them Internally&lt;/h2&gt;
&lt;p&gt;在对象内部优先访问实例变量。&lt;/p&gt;&lt;p&gt;直接访问而不用点语法的影响：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;不经过消息派发，速度快（编译器生成的代码会直接访问相应的内存）&lt;/li&gt;
&lt;li&gt;不会调用setter，也绕过了相应的内存管理语义&lt;/li&gt;
&lt;li&gt;不会触发KVO&lt;/li&gt;
&lt;li&gt;没有机会在getter, setter中设置断点来调试&lt;/li&gt;
&lt;li&gt;没有机会&lt;code&gt;lazy intialization&lt;/code&gt;，而getter机制能在首次被调用到的时候才去初始化实例变量&lt;/li&gt;
&lt;li&gt;初始化和dealloc的时候总是要直接用实例变量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作者建议尽量在读取实例变量的时候直接访问，设置的时候用属性（会自动考虑内存管理语义）&lt;/p&gt;&lt;h2&gt;Item 8: Understand Object Equality&lt;/h2&gt;
&lt;p&gt;其实就是理解NSObject自带的&lt;code&gt;isEqual:&lt;/code&gt;方法。&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;==&lt;/code&gt;就是比指针&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isEqual:&lt;/code&gt;比的是&lt;code&gt;hash&lt;/code&gt;，所以自定义的类要实现equality就要自行实现这两个方法&lt;ul&gt;
&lt;li&gt;hash不同必然对象不同，但由于有hash collisions的存在，反过来并不成立&lt;/li&gt;
&lt;li&gt;尽量用对象的不可变部分来做hash&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个做hash的方法：&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSUInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;hash&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;NSUInteger&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;firstNameHash&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_firstName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;NSUInteger&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lastNameHash&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_lastName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;NSUInteger&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ageHash&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;firstNameHash&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lastNameHash&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ageHash&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Item 9: Use the Class Cluster Pattern to Hide Implementation Detail&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;UIButton&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;buttonWithType:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UIButtonType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;作者将上述这种解释为“类族”，即它的返回值可能是各种button，但归根结底，都是&lt;code&gt;UIButton&lt;/code&gt;，就是靠着switch各种type来实例化各种子类。&lt;/li&gt;
&lt;li&gt;同时，因为OC没有abstract class，为了避免直接使用抽象基类，一般不提供init方法，并在基类相关方法里干脆抛异常&lt;/li&gt;
&lt;li&gt;这里使用&lt;code&gt;isMemberOfClass&lt;/code&gt;就要小心，它是kind，但不一定是member&lt;/li&gt;
&lt;li&gt;系统框架里有很多&lt;code&gt;class cluster&lt;/code&gt;，特别是&lt;code&gt;collection&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;所以&lt;code&gt;if([anArray class] == [NSArray class])&lt;/code&gt;是false（原因就是它是被当作“&lt;strong&gt;抽象基类&lt;/strong&gt;来设计的，实际上是隐藏在公共接口后面的某个内部类型）&lt;/li&gt;
&lt;li&gt;同样，用&lt;code&gt;isKindOfClass:&lt;/code&gt;至少能判断是在这个类族里&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Item 10: Use Associated Objects to Attach Custom Data to Existing Classes&lt;/h2&gt;
&lt;p&gt;扩展现有类，我们可以继承，但有时候一些特殊机制创建的类却无法继承，可以通过&lt;code&gt;Associated Object&lt;/code&gt;来添加这些信息。&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;以键值对来存储，所以是可以存储多个关联数据的&lt;/li&gt;
&lt;li&gt;可以指定storage policy，对应内存管理语义&lt;/li&gt;
&lt;/ul&gt;
&lt;figure style="flex: 140.1840490797546" &gt;&lt;img loading="lazy" width="914" height="326" src="https://cdn.jsdelivr.net/gh/wzywalker/wzywalker.github.io@main/archives/assets/820ae39c34d1147867f1dfb6f1d64de3.png" /&gt;&lt;/figure&gt;&lt;p&gt;方法:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Sets up an association of object to value with the given key and policy.&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;objc_setAssociatedObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;objc_AssociationPolicy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;policy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Retrieves the value for the association on object with the given key.&lt;/span&gt;
&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;objc_getAssociatedObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Removes all associations against object.&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;objc_removeAssociatedObjects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;书中写了一个例子，alertView的代理方法来处理按了什么键，而一个页面中如果有多个alertView，且用同一个代理对象，那么处理需要更精细（比如需要知道是哪个警告框弹的，我一般用tag）。
而如果把处理方法定义为一个block，并把它关联到UIAlertView类，那么处理逻辑就可以跟定义alertView写在一起了。&lt;/p&gt;&lt;p&gt;todo, item 11-14&lt;/p&gt;</description><author>hi@imalan.cn (walker)</author><guid isPermaLink="true">/archives/%E3%80%8AEffective-Objective-C-2-0%E3%80%8B%E7%AC%94%E8%AE%B0%E7%AC%AC1-2%E7%AB%A0/</guid><pubDate>Fri, 14 Jan 2022 00:00:00 +0806</pubDate></item><item><title>HMM、NER、PoS、Viterbi笔记</title><link>/archives/HMM%E3%80%81NER%E3%80%81PoS%E3%80%81Viterbi%E7%AC%94%E8%AE%B0/</link><description>&lt;p&gt;开局一句话，隐马尔可夫，就是在“溯源”，即产生你这个现象的源头在哪。&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;比如你掷出的这个显示为6的骰子，是来自于六面体的还是四面体的，或是来自于普通的还是灌铅了的&lt;/li&gt;
&lt;li&gt;又比如你一句话里的某一个词，它是处于开始位置还是中间位置，或是它是一个人名还是一个地点或是一个介词&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;任何一种表现形式，都有一个它的“原因”或“属性”。 现在正式开始，来自我能理解的网络资料，我的课程，以及一些思考&lt;/p&gt;&lt;p&gt;首先几个基础概念：&lt;/p&gt;&lt;h1&gt;命名实体识别(NER)&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;实体&lt;/strong&gt;：人物(PER)，地点(LOC)，等
&lt;strong&gt;BIOES&lt;/strong&gt;: 开始(Begin)， 中间(Inner)， 结尾(E)，单个(Single)，其它(Other)&lt;/p&gt;&lt;p&gt;比如人名：张北京，就可以被识别为$\Rightarrow$ B-PER, I-PER, E-PER&lt;/p&gt;&lt;h1&gt;Part-of-Speech Tagging（词性标注）&lt;/h1&gt;
&lt;p&gt;词性标注是为输入文本中的每个词性标注词分配词性标记的过程。标记算法的输入是一系列(标记化的)单词和标记集，输出是一系列标记，每个标记一个。&lt;/p&gt;&lt;p&gt;标记是一项消除歧义的任务;单词是模糊的，有不止一个可能的词性(歧义)，我们的目标是为这种情况找到正确的标签。例如，book可以是动词(book that flight)，也可以是名词(hand me that book)。That可以是一个限定词(Does that flight serve dinner)，也可以是一个补语连词(I thought that your flight was earlier)。后置标记的目标是解决这些分辨率模糊，为上下文选择合适的标记&lt;/p&gt;&lt;h1&gt;Sequence model&lt;/h1&gt;
&lt;p&gt;Sequence models are central to NLP: they are models where there is some sort of &lt;code&gt;dependence through time&lt;/code&gt; between your inputs.&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;The classical example of a sequence model is the &lt;code&gt;Hidden Markov Model&lt;/code&gt; for &lt;strong&gt;part-of-speech tagging&lt;/strong&gt;. (词性标注)&lt;/li&gt;
&lt;li&gt;Another example is the &lt;code&gt;conditional random field&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HMM模型的典型应用是词性标注&lt;/p&gt;&lt;figure style="flex: 94.51219512195122" &gt;&lt;img loading="lazy" width="1240" height="656" src="https://cdn.jsdelivr.net/gh/wzywalker/wzywalker.github.io@main/archives/assets/8246ff19ee962171c5d3b15abd234eec.png" /&gt;&lt;/figure&gt;&lt;p&gt;词性标注语料库是统计标注算法的关键训练(和测试)集。三个主要的标注语料库始终用于训练和测试英语词性标注器。&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;布朗语料库是1961年在美国出版的500篇不同体裁的书面文本的100万单词样本。&lt;/li&gt;
&lt;li&gt;《华尔街日报》语料库收录了1989年发表在《华尔街日报》上的100万个单词。&lt;/li&gt;
&lt;li&gt;总机语料库由1990-1991年收集的200万字电话对话组成。语料库的创建是通过在文本上运行一个自动的词性标记，然后由人工注释器手工更正每个标记。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;HMM&lt;/h1&gt;
&lt;p&gt;HMM是一个序列模型(&lt;code&gt;sequence model&lt;/code&gt;)。序列模型或序列分类器是一个模型，其工作是为序列中的每个单元分配一个标签或类，从而将一个观察序列(观察状态)映射到一个标签序列(隐藏状态)。HMM是一种概率序列模型：给定一个单位序列(单词、字母、语素、句子等等)，它计算可能的标签序列的概率分布，并选择最佳标签序列。&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;3个骰子，6面体，4面体，8面体(D6, D4, D8)&lt;/li&gt;
&lt;li&gt;每次随机选出一个骰子投掷，得到一个数字&lt;/li&gt;
&lt;li&gt;共十次，得到10个数字&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;可见状态链&lt;/code&gt;：10次投掷得到10个数字(1,3,5...)$\Rightarrow$对应你看得的10个单词&lt;/li&gt;
&lt;li&gt;&lt;code&gt;隐含状态链&lt;/code&gt;：每一次投掷都有可能拿到三种骰子之一，(D6, D6, D4...) $\Rightarrow$对应为每个单词的词性&lt;/li&gt;
&lt;li&gt;转换概率（&lt;code&gt;transition probability&lt;/code&gt;）：隐含状态之间的概率($\Rightarrow$对应为语法)：&lt;ul&gt;
&lt;li&gt;每一次拿到某种骰子之后，下一次拿到三种骰子的概率（[1/3,1/3,1/3],...)&lt;/li&gt;
&lt;li&gt;或者说主动决策下一次用哪个骰子的概率[a,b,c...] (相加为1)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可见状态之间没有转换概率&lt;/li&gt;
&lt;li&gt;输出概率（&lt;code&gt;emission probability&lt;/code&gt;）：隐含状态和可见状态之间的概率，比如D4下1的概率为1/4，D6下为1/6 (表现概率，激发概率，多种翻译)&lt;/li&gt;
&lt;/ol&gt;
&lt;figure style="flex: 106.16438356164383" &gt;&lt;img loading="lazy" width="1240" height="584" src="https://cdn.jsdelivr.net/gh/wzywalker/wzywalker.github.io@main/archives/assets/1c9b14ebecf2d171b7f511296c425412.png" /&gt;&lt;/figure&gt;&lt;p&gt;应用HMM模型时候，往往是缺失了一部分信息的，&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;有时候你知道骰子有几种，每种骰子是什么，但是不知道掷出来的骰子序列；&lt;/li&gt;
&lt;li&gt;有时候你只是看到了很多次掷骰子的结果，剩下的什么都不知道。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何应用算法去估计这些缺失的信息，就成了一个很重要的问题，这也是HMM模型能做的几件事：&lt;/p&gt;&lt;h2&gt;Decoding&lt;/h2&gt;
&lt;p&gt;解码的过程就是在给出一串序列和已知HMM模型的情况下，找到最可能的隐性状态序列。&lt;/p&gt;&lt;p&gt;比如结果是：1 6 3 5 2 7 3 5 2 4, 求最可能的骰子序列&lt;/p&gt;&lt;h3&gt;Viterbi algorithm&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;掷出1的最大概率是4面体： P1(D4) = P(1|D4) * P(D4) = 1/4 * 1/3&lt;/li&gt;
&lt;li&gt;掷出6的最大概率是 P2(D6) = P(6|D6) * P(D6) = 1/6 * 1/3&lt;/li&gt;
&lt;li&gt;连续1，6的概率就成了1的概率 * 2的概率 P2(D6) = P1(D4) * P2(D6) = 1/216&lt;/li&gt;
&lt;li&gt;1,6,3 =&amp;gt; P3(D4) = P2(D6) * P(3|D4) * P(D4) = $\frac{1}{216} \cdot \frac{1}{3} \cdot \frac{1}{4}$&lt;/li&gt;
&lt;li&gt;and so on&lt;/li&gt;
&lt;li&gt;但这个例子忽略了转移概率，即P(D6|D4), P(D4|D6,D4)，或者说默认了转移概率就是1/3，即每次挑中三个骰子的机率均等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Evaluation&lt;/h2&gt;
&lt;p&gt;根据条件和序列结果求这一序列的概率是多少，比如三种骰子，投出了1，6，3的结果：&lt;/p&gt;&lt;figure style="flex: 169.86301369863014" &gt;&lt;img loading="lazy" width="1240" height="365" src="https://cdn.jsdelivr.net/gh/wzywalker/wzywalker.github.io@main/archives/assets/3008ce6fdd893286e56d1b7f9ad1a342.png" /&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;第1列表示第一次投掷得到1的可能性和为0.18&lt;/li&gt;
&lt;li&gt;第2列为1 6的的可能性和为0.05&lt;/li&gt;
&lt;li&gt;第3列为1 6 3的可能性和为0.03&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果远低于或远高于这个概率，必然有做过手脚的骰子。&lt;/p&gt;&lt;h2&gt;转移概率的矩阵表示&lt;/h2&gt;
&lt;p&gt;这次假定不同的骰子是用来作弊的，作弊者会根据情况来挑选骰子，这样转移概率就不可能是均等的了：&lt;/p&gt;&lt;figure style="flex: 83.33333333333333" &gt;&lt;img loading="lazy" width="500" height="300" src="https://cdn.jsdelivr.net/gh/wzywalker/wzywalker.github.io@main/archives/assets/8259518e5781e3ce798778e8da69de85.png" /&gt;&lt;/figure&gt;&lt;p&gt;很幸运，这么复杂的概率转移图，竟然能用矩阵表达：
$A = 
\begin{bmatrix}
0.15 &amp;amp; 0.45 &amp;amp; 0.4 \
0.25 &amp;amp; 0.35 &amp;amp; 0.4 \
0.10 &amp;amp; 0.55 &amp;amp; 0.35
\end{bmatrix}
$&lt;/p&gt;&lt;p&gt;既然是3行3列，显然$A_{ij}$就是从i切换到j的概率，比如$A_{12}$ 就应该是这个人把骰子从作弊骰子1切换到2的概率。&lt;/p&gt;&lt;figure style="flex: 102.04081632653062" &gt;&lt;img loading="lazy" width="500" height="245" src="https://cdn.jsdelivr.net/gh/wzywalker/wzywalker.github.io@main/archives/assets/653c3cb7f8c2f3a541d170421fe489bf.png" /&gt;&lt;/figure&gt;&lt;p&gt;相应地，发射概率（即不同骰子摇出的点数的概率）也能表示为矩阵：
$B = 
\begin{bmatrix}
0.16 &amp;amp; 0.16 &amp;amp; 0.16 &amp;amp; 0.16 &amp;amp; 0.16 &amp;amp; 0.16 \
0.02 &amp;amp; 0.02 &amp;amp; 0.02 &amp;amp; 0.02 &amp;amp; 0.02 &amp;amp; 0.90 \
0.40 &amp;amp; 0.20 &amp;amp; 0.25 &amp;amp; 0.05 &amp;amp; 0.05 &amp;amp; 0.05 \
\end{bmatrix}
$&lt;/p&gt;&lt;p&gt;现在有了转移概率和发射概率，我们再来看看前面的掷出1，6，3的骰子的概率：
骰子设为D1 D2 D3, 每一轮的可能性为P1 P2 P3, 则P = P3D1 + P3D2 + P3D3 即第3轮时3种骰子能投出3的概率和&lt;/p&gt;&lt;p&gt;我来推导一下P3D1怎么来的，上面的表格是我从别人的博客里复制的，这里就不做一个一模一样的图了，我们一步步来吧：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;第一次投掷每个骰子的概率应该是隐含了各为1/3吧？(这个好像叫&amp;quot;&lt;code&gt;初始隐状态&lt;/code&gt;&amp;quot; $\pi$)&lt;/li&gt;
&lt;li&gt;P1D1 = 0.16 * 0.33, 即1/3概率拿到D1，0.16概率投出1，同理：&lt;ul&gt;
&lt;li&gt;P1D2 = 0.02 * 0.33&lt;/li&gt;
&lt;li&gt;P1D3 = 0.40 * 0.33&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;P2D1 =&lt;ul&gt;
&lt;li&gt;P1D1 * $A_{00}$ * $B_{05}$ = P1D1 * 0.15 * 0.16 即P1D1前提下，乘上D1换到D1的概率，再乘上D1选出6的概率&lt;/li&gt;
&lt;li&gt;$+$&lt;/li&gt;
&lt;li&gt;P1D2 * $A_{10}$ * $B_{05}$ = P1D1 * 0.25 * 0.16 即P1D2前提下，乘上D2换到D1的概率，再乘上D1选出6的概率&lt;/li&gt;
&lt;li&gt;$+$&lt;/li&gt;
&lt;li&gt;P1D3 * $A_{20}$ * $B_{05}$ = P1D1 * 0.10 * 0.16 即P1D3前提下，乘上D3换到D1的概率，再乘上D1选出6的概率&lt;/li&gt;
&lt;li&gt;以此类推得到P2D2, P2D3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;P3D2 = （&lt;em&gt;D1的概率太平均，这次换个D2来演示&lt;/em&gt;）&lt;ul&gt;
&lt;li&gt;P2D1 * $A_{01}$ * $B_{12}$ = P2D1 * 0.45 * 0.02 即P2D1前提下，乘上D1换到D2的概率，再乘上D2选出3的概率&lt;/li&gt;
&lt;li&gt;$+$&lt;/li&gt;
&lt;li&gt;P2D2 * $A_{11}$ * $B_{12}$ = P2D1 * 0.35 * 0.02 即P2D2前提下，乘上D2换到D2的概率，再乘上D2选出3的概率&lt;/li&gt;
&lt;li&gt;$+$&lt;/li&gt;
&lt;li&gt;P2D3 * $A_{21}$ * $B_{12}$ = P2D1 * 0.35 * 0.02 即P2D3前提下，乘上D3换到D2的概率，再乘上D2选出3的概率&lt;/li&gt;
&lt;li&gt;以此类推得到P3D1, P3D2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;P = P3D1 + P3D2 + P3D3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
\sum_{r\in R}\prod_t^TP(v(t)|w_r(t)) | w_r(t-1))
$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;v: visible 可见序列&lt;/li&gt;
&lt;li&gt;w: 隐性状态序列&lt;/li&gt;
&lt;li&gt;R: 所有隐状态的可能性&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;t-1隐状态前提下得到t的概率（转移概率）如D2换到D3的概率&lt;/li&gt;
&lt;li&gt;上一概率前提下得到v(t)的概率，如D3扔出1的概率&lt;/li&gt;
&lt;li&gt;一种隐状态下出序列的结果为累乘&lt;/li&gt;
&lt;li&gt;所有隐状态下出该序列的结果为3的累加&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;简单来说：&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;可见序列$v(t)$的概率依赖当前$t$下的隐状态（比如是不是作弊了的骰子）$w_r(t)$&lt;ul&gt;
&lt;li&gt;得到：$P(v(t)\ \color{red}|\ w_r(t))$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当前隐状态$w_r(t)$又有两个特征:&lt;ol&gt;
&lt;li&gt;由$w_r(t-1)$转换而来的: $P(v(t)|w_r(t))\color{red}{|}w_r(t-1)$&lt;/li&gt;
&lt;li&gt;$T$是链式的，概率累乘： $\color{red}{\prod_t^T}P(v(t)|w_r(t)) | w_r(t-1))$&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;最后一步时的隐状态显然是几种之一，累加起来就是所有可能性：&lt;ul&gt;
&lt;li&gt;$\color{red}{\sum_{r\in R}}\prod_t^TP(v(t)|w_r(t)) | w_r(t-1))$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;应用&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;初始概率&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以&lt;code&gt;BMES&lt;/code&gt;为例（参考NER），把其认为是隐状态，然后认为每个词（里的字）是由隐状态产生的。&lt;/p&gt;&lt;p&gt;即&lt;code&gt;B&lt;/code&gt;对应的字可能有“&lt;code&gt;中&lt;/code&gt;”，“&lt;code&gt;国&lt;/code&gt;”，等等，能作为词语打头的字都可能由隐状态&lt;code&gt;B&lt;/code&gt;产生，其它状态依次类推。&lt;/p&gt;&lt;p&gt;就像我们三种骰子的初始概率，完全取决于每种骰子占总数的多少一样，HHM应用到语言模型里，初始概率就是先把文字全部用&lt;code&gt;BMES&lt;/code&gt;表示，然后分别数出个数，与总数做个对比。（此时已经可以判断出&lt;code&gt;M&lt;/code&gt;和&lt;code&gt;E&lt;/code&gt;的概率只能是0了。&lt;/p&gt;&lt;ol start="2"&gt;
&lt;li&gt;转移概率&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;应该是4个循环吧，每次把当前状态后面跟上四个状态的情况都数出来，就是一个隐状态到其它四个状态的转移概率，四行拼到一起就是一个转移概率的矩阵，类似上面的三种骰子互相切换的矩阵。&lt;/p&gt;&lt;p&gt;也可以用字典，比如 BE BS BB BM等共16个键，两两遍历整个字符串完后，16个count就出来了，group后就能得到概率了。&lt;/p&gt;&lt;ol start="3"&gt;
&lt;li&gt;观测概率（发射概率）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个就是每一个隐状态下对应不同表面文字的概率了，比如：{s:{&amp;quot;周&amp;quot;: 0.3357, &amp;quot;爬&amp;quot;:0.00003}...}&lt;/p&gt;&lt;p&gt;要知道，三种概率里面是有很多0的，意思就是在现有的语法体系里面不可能出现的场景，比如第一个字不可能是M和E，B后面不可能跟S，B，而M后面不可能跟B，S，以及S后面不可能跟M，E等，再比如假如哪个字永远不可能是第一个字，那么它的观测概率在S里面就永远是0，等等。&lt;/p&gt;&lt;p&gt;这里要计算的话，因为隐状态是用文字推断出来的，所以这个映射关系还在，那么整理一下两个数组就能把每个隐状态能对应的文字全部映射上了。&lt;/p&gt;&lt;hr /&gt;
&lt;p&gt;以下是我课程里的笔记，理解了上面的内容，理解下面是没有任何障碍的。&lt;/p&gt;&lt;h1&gt;viterbi in NLP&lt;/h1&gt;
&lt;p&gt;$\overbrace{
  \enclose{circle}{0} 
  \xrightarrow[农]{2.5}
  \enclose{circle}{1} 
  \xrightarrow[产]{4.0}
  \enclose{circle}{2} 
}^{1.4}
\xrightarrow[物]{2.3}
\enclose{circle}{3}$&lt;/p&gt;&lt;p&gt;$\enclose{circle}{0} 
\xrightarrow[农]{2.5}
\underbrace{
  \enclose{circle}{1} 
  \xrightarrow[产]{4.0}
  \enclose{circle}{2} 
  \xrightarrow[物]{2.3}
  \enclose{circle}{3}
}_{2.1}$&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;node: $\enclose{circle}{2}$ ，圆圈，就是位置索引&lt;/li&gt;
&lt;li&gt;edge: 词， 箭头，很好理解：string[0,1] = '农'&lt;/li&gt;
&lt;li&gt;Each edge weight is a &lt;code&gt;negative log probality&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;-log(P(农)) = 2.5&lt;/li&gt;
&lt;li&gt;-log(P(产)) = 4.0&lt;/li&gt;
&lt;li&gt;-log(P(农产)) = 1.4&lt;/li&gt;
&lt;li&gt;-log(P(产物)) = 2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Each path is a segmentation for the sentence&lt;/li&gt;
&lt;li&gt;Each path weight is a sentence &lt;code&gt;unigram&lt;/code&gt; negative log probability&lt;ul&gt;
&lt;li&gt;-log(P(农产)) + -log(P(物)) = 1.4 + 2.3 = 3.7&lt;/li&gt;
&lt;li&gt;农 + 产 + 物 = 2.5 + 4.0 + 2.3 = 8.8&lt;/li&gt;
&lt;li&gt;农 + 产物 = 2.5 + 2.1 = 4.6&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;two step&lt;/h2&gt;
&lt;p&gt;1.前向，从左往右，找到&lt;strong&gt;最佳路径&lt;/strong&gt;的分数
2.后向，从右往左，创建一条最佳路径&lt;/p&gt;&lt;h3&gt;forward algorithm&lt;/h3&gt;
&lt;p&gt;pseudo code&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;best_score&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;graph&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ascending&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;best_score&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;∞&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="n"&gt;incoming&lt;/span&gt; &lt;span class="n"&gt;edge&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;
    &lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;best_score&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;edgeprev_node&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;edge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;best_score&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;best_score&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt;
      &lt;span class="n"&gt;best_edge&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;edge&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;example:
&lt;figure style="flex: 82.65765765765765" &gt;&lt;img loading="lazy" width="734" height="444" src="https://cdn.jsdelivr.net/gh/wzywalker/wzywalker.github.io@main/archives/assets/5aa5426eb70b4c6cd0b8c4b1dacda749.png" /&gt;&lt;/figure&gt;&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;初始节点打分0，其它节点打分为$\infty$&lt;/li&gt;
&lt;li&gt;每个节点打分由其(&lt;code&gt;incoming edge&lt;/code&gt;)(即来源箭头)和来源节点的打分构成&lt;/li&gt;
&lt;li&gt;如果有多个来源，则计算出该来源的得分，与该节点当前的得分做对比，取得分低的那个&lt;/li&gt;
&lt;li&gt;把该节点的分值和来源edge存到该节点上（edge就是词）。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;简单来说，还是和之前的骰子一样，每一次算出到当前节点的最低分数的路径。&lt;/li&gt;
&lt;li&gt;上图中，我们就把e1, e2, e5选出来了，这个过程中，删除了e3, e4这几条路径&lt;/li&gt;
&lt;li&gt;best_score=(0.0, 2.5, 1.4, 3.7), best_edge = (NULL, e1, e2, e5)&lt;/li&gt;
&lt;li&gt;用字典来把Node映射上去：{0:(0.0, NULL), 1:(2.5, e1), 2:(1.4, e2), 3:(3.7, e5)}&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;backward algorithm&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;best_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;next_edge&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;best_edge&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;best_edge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;next_edge&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;NULL&lt;/span&gt;
  &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;next_edge&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;best_path&lt;/span&gt;
  &lt;span class="n"&gt;next_edge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;best_edge&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;next_edge&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prev_node&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;reverse&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;举例：
&lt;figure style="flex: 102.56410256410257" &gt;&lt;img loading="lazy" width="800" height="390" src="https://cdn.jsdelivr.net/gh/wzywalker/wzywalker.github.io@main/archives/assets/c97b27230bd42318efb72375c245c50b.png" /&gt;&lt;/figure&gt;&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;从图片可知，&lt;code&gt;path&lt;/code&gt;就是&lt;code&gt;edge&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;初始path是空，[]&lt;/li&gt;
&lt;li&gt;从&lt;code&gt;forward&lt;/code&gt;的结果字典里找到node 3的best_edge，就是e5 [e5]&lt;/li&gt;
&lt;li&gt;e5的来源的是node 2&lt;/li&gt;
&lt;li&gt;从字典里找到2的best_edge，是e2 [e5, e2]&lt;/li&gt;
&lt;li&gt;e2的来源是node 0&lt;/li&gt;
&lt;li&gt;0的best_edge是NULL，结束递归&lt;/li&gt;
&lt;li&gt;reverse: [e2, e5]&lt;/li&gt;
&lt;/ul&gt;
&lt;figure style="flex: 53.25581395348837" &gt;&lt;img loading="lazy" width="458" height="430" src="https://cdn.jsdelivr.net/gh/wzywalker/wzywalker.github.io@main/archives/assets/c7650195782b845d9be6e36dac55f277.png" /&gt;&lt;/figure&gt;&lt;p&gt;这个很好理解&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;0到农，到农产，到农产物的概率，表示为0.0+ -log(p(农/农产/农产物))&lt;/li&gt;
&lt;li&gt;在农的前提下，就有农到产，和农到产物：best(1) + -log(P(产/产物))&lt;/li&gt;
&lt;li&gt;在产的前提下，就只有best(2) + -log(P(物))了&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;应用到NLP：&lt;/p&gt;&lt;figure style="flex: 73.99193548387096" &gt;&lt;img loading="lazy" width="734" height="496" src="https://cdn.jsdelivr.net/gh/wzywalker/wzywalker.github.io@main/archives/assets/5e643e29e4fe62ef780ba545dc3a04fb.png" /&gt;&lt;/figure&gt;&lt;p&gt;这里就是把node, egde具体了一下：&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;多包了一层for-each，意思是前面的代码是处理一行的&lt;/li&gt;
&lt;li&gt;node对应是单词结尾(word_end)，其实就是一个index，前面说过了&lt;/li&gt;
&lt;li&gt;edge对应是单词(word)，前面也说过了，即&lt;code&gt;string[5,7]&lt;/code&gt;的意思&lt;/li&gt;
&lt;li&gt;score由uni-gram来计算&lt;/li&gt;
&lt;li&gt;计算上，就是找到以基准字当作单词结尾，然后前面的字跟它拼起来的所有可能性，找最低分：&lt;ul&gt;
&lt;li&gt;比如abcdefg, 如果当前是e，那么分别比较：abced, bcde, cde, de&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接上例，输出结果应该这么解读：&lt;ul&gt;
&lt;li&gt;以b为结尾的单词，最有可能的是xxx, 它的得分是，它的索引是，&lt;/li&gt;
&lt;li&gt;以c为结尾的单词，最有可能是bc或是abc，它的得分是，bc/abc的索引是(1,2)，这样&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure style="flex: 90.2439024390244" &gt;&lt;img loading="lazy" width="592" height="328" src="https://cdn.jsdelivr.net/gh/wzywalker/wzywalker.github.io@main/archives/assets/9de76a49c53e036f86c0c2e7a950c8cd.png" /&gt;&lt;/figure&gt;&lt;ol&gt;
&lt;li&gt;显然这里已经知道edge不知道是一个词，而且是一个词的首尾边界&lt;/li&gt;
&lt;li&gt;也知道存到best_edges里面的其实就是词的位置索引&lt;/li&gt;
&lt;li&gt;反向的时候，从最后一个索引找到得分最低的词，再从这个单词向前找，一直找到&lt;ul&gt;
&lt;li&gt;所以next_edge[0]其实就是当前单词词首，[1]就是词尾&lt;/li&gt;
&lt;li&gt;所以把当前单词存进去后，向前搜索就要以next_edge[0]为字典，找对应的best_edge&lt;/li&gt;
&lt;li&gt;再从best_edge里面解析出最合适的单词的首尾索引，存到结果数组里&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description><author>hi@imalan.cn (walker)</author><guid isPermaLink="true">/archives/HMM%E3%80%81NER%E3%80%81PoS%E3%80%81Viterbi%E7%AC%94%E8%AE%B0/</guid><pubDate>Tue, 14 Jun 2022 00:00:00 +0806</pubDate></item></channel></rss>